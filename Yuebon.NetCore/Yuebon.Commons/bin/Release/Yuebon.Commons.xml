<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yuebon.Commons</name>
    </assembly>
    <members>
        <member name="T:Yuebon.Common.Attributes.ComputedAttribute">
            <summary>
            Specifies that this is a computed column.
            </summary>
        </member>
        <member name="T:Yuebon.Common.Attributes.ExplicitKeyAttribute">
            <summary>
            Specifies that this field is a explicitly set primary key in the database
            </summary>
        </member>
        <member name="T:Yuebon.Common.Attributes.IgnoreAttrbute">
            <summary>
            忽略属性，标识该实体属性不在表中映射列。
            </summary>
        </member>
        <member name="T:Yuebon.Common.Attributes.KeyAttribute">
            <summary>
            Specifies that this field is a primary key in the database
            </summary>
        </member>
        <member name="T:Yuebon.Common.Attributes.TableAttribute">
            <summary>
            Defines the name of a table to use in Dapper.Contrib commands.
            </summary>
        </member>
        <member name="M:Yuebon.Common.Attributes.TableAttribute.#ctor(System.String)">
            <summary>
            Creates a table mapping to a specific name for Dapper.Contrib commands
            </summary>
            <param name="tableName">The name of this table in the database.</param>
        </member>
        <member name="P:Yuebon.Common.Attributes.TableAttribute.Name">
            <summary>
            The name of the table in the database
            </summary>
        </member>
        <member name="T:Yuebon.Common.Attributes.WriteAttribute">
            <summary>
            Specifies whether a field is writable in the database.
            </summary>
        </member>
        <member name="M:Yuebon.Common.Attributes.WriteAttribute.#ctor(System.Boolean)">
            <summary>
            Specifies whether a field is writable in the database.
            </summary>
            <param name="write">Whether a field is writable in the database.</param>
        </member>
        <member name="P:Yuebon.Common.Attributes.WriteAttribute.Write">
            <summary>
            Whether a field is writable in the database.
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Cache.CacheProvider">
            <summary>
            缓存提供模式，使用Redis或MemoryCache
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Cache.CacheProvider.IsUseRedis">
            <summary>
            是否使用Redis
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Cache.CacheProvider.ConnectionString">
            <summary>
            Redis连接
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Cache.CacheProvider.InstanceName">
            <summary>
            Redis实例名称
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Cache.ICacheService">
            <summary>
            缓存服务接口
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Exists(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.ExistsAsync(System.String)">
            <summary>
            验证缓存项是否存在（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.AddAsync(System.String,System.Object)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.AddAsync(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.AddAsync(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.RemoveAsync(System.String)">
            <summary>
            删除缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.RemoveAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存（异步方式）
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.RemoveByPattern(System.String)">
            <summary>
            使用通配符找出所有的key然后逐个删除
            </summary>
            <param name="pattern">通配符</param>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.RemoveCacheAll">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.GetAsync``1(System.String)">
            <summary>
            获取缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.GetAsync(System.String)">
            <summary>
            获取缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.GetAllAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合（异步方式）
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.ReplaceAsync(System.String,System.Object)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.ReplaceAsync(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.ICacheService.ReplaceAsync(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存（异步方式）
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Cache.MemoryCacheService">
            <summary>
            MemoryCache缓存操作
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Exists(System.String)">
            <summary>
            验证缓存项是否存在,TryGetValue 来检测 Key是否存在的
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.RemoveCacheAll">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.RemoveByPattern(System.String)">
            <summary>
            删除匹配到的缓存
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.SearchCacheRegex(System.String)">
             <summary>
             搜索 匹配到的缓存
            </summary>
             <param name="pattern"></param>
             <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.GetCacheKeys">
            <summary>
            获取所有缓存键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.MemoryCacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Cache.RedisCacheService">
            <summary>
            Redis缓存操作
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Exists(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.ExistsAsync(System.String)">
            <summary>
            验证缓存项是否存在
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间,Redis中无效）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间,Redis中无效）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.RemoveByPattern(System.String)">
            <summary>
            使用通配符找出所有的key然后逐个删除
            </summary>
            <param name="pattern">通配符</param>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.RemoveCacheAll">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.RedisCacheService.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Cache.YuebonCacheHelper">
            <summary>
            缓存操作帮助类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Exists(System.String)">
            <summary>
            验证缓存项是否存在,TryGetValue 来检测 Key是否存在的
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Add(System.String,System.Object)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Add(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Add(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            添加缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Remove(System.String)">
            <summary>
            删除缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.RemoveAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除缓存
            </summary>
            <param name="key">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.RemoveByPattern(System.String)">
            <summary>
            删除匹配到的缓存
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.RemoveCacheAll">
            <summary>
            删除所有缓存
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Get``1(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Get(System.String)">
            <summary>
            获取缓存
            </summary>
            <param name="key">缓存Key</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.GetAll(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取缓存集合
            </summary>
            <param name="keys">缓存Key集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Replace(System.String,System.Object)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Replace(System.String,System.Object,System.TimeSpan,System.TimeSpan)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresSliding">滑动过期时长（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <param name="expiressAbsoulte">绝对过期时长</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Cache.YuebonCacheHelper.Replace(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            修改缓存
            </summary>
            <param name="key">缓存Key</param>
            <param name="value">新的缓存Value</param>
            <param name="expiresIn">缓存时长</param>
            <param name="isSliding">是否滑动过期（如果在过期时间内有操作，则以当前时间点延长过期时间）</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.CodeGenerator.CodeGenerator">
            <summary>
            代码生成器。
            <remarks>
            根据指定的实体域名空间生成Repositories和Services层的基础代码文件。
            </remarks>
            </summary>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.#cctor">
            <summary>
            静态构造函数：从IoC容器读取配置参数，如果读取失败则会抛出ArgumentNullException异常
            </summary>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.Generate(System.Boolean)">
            <summary>
            生成指定的实体域名空间下各实体对应Repositories和Services层的基础代码文件
            </summary>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.GenerateSingle``2(System.Boolean)">
            <summary>
            生成指定的实体对应IServices和Services层的基础代码文件
            </summary>
            <typeparam name="T">实体类型（必须实现IBaseModel接口）</typeparam>
            <typeparam name="TKey">实体主键类型</typeparam>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.GenerateSingle(System.Type,System.Boolean)">
            <summary>
            生成指定的实体对应IServices和Services层的基础代码文件
            </summary>
            <param name="modelType">实体类型（必须实现IBaseModel接口）</param>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.ReadTemplate(System.String)">
            <summary>
            从代码模板中读取内容
            </summary>
            <param name="templateName">模板名称，应包括文件扩展名称。比如：template.txt</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.GenerateIRepository(System.String,System.String,System.Boolean)">
            <summary>
            生成IRepository层代码文件
            </summary>
            <param name="modelTypeName">实体类型</param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.GenerateRepository(System.String,System.String,System.Boolean)">
            <summary>
            生成Repository层代码文件
            </summary>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.GenerateIService(System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成IService文件
            </summary>
            <param name="modelsNamespace"></param>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.GenerateService(System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成Service文件
            </summary>
            <param name="modelsNamespace"></param>
            <param name="modelTypeName"></param>
            <param name="keyTypeName"></param>
            <param name="ifExsitedCovered">如果目标文件存在，是否覆盖。默认为false</param>
        </member>
        <member name="M:Yuebon.Commons.CodeGenerator.CodeGenerator.WriteAndSave(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="fileName"></param>
            <param name="content"></param>
        </member>
        <member name="T:Yuebon.Commons.Configs">
            <summary>
            配置文件读取操作
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Configs.GetSection(System.String)">
            <summary>
            根据Key获取数配置内容
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Configs.GetConfigurationValue(System.String,System.String)">
            <summary>
            根据section和key获取配置内容
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Configs.GetConnectionString(System.String)">
            <summary>
            根据Key获取数据库连接字符串
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.IRepositories.IRepository`2">
            <summary>
            定义实体仓储模型的数据标准操作
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TKey">主键类型</typeparam>
        </member>
        <member name="P:Yuebon.Commons.IRepositories.IRepository`2.UnitOfWork">
            <summary>
            获取 当前单元操作对象
            </summary>
        </member>
        <member name="E:Yuebon.Commons.IRepositories.IRepository`2.OnOperationLog">
            <summary>
            定义一个操作记录的事件处理
            </summary>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Get(`1,System.Data.IDbTransaction)">
            <summary>
            同步查询单个实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAsync(`1,System.Data.IDbTransaction)">
            <summary>
            异步查询单个实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            同步查询单个实体。
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步查询单个实体。
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetByIdRelationUser(System.String,System.Data.IDbTransaction)">
            <summary>
            查询对象，并返回关联的创建用户信息，
            查询表别名为s，条件要s.字段名
            </summary>
            <param name="id">主键Id</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAll(System.Data.IDbTransaction)">
            <summary>
            同步查询所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllAsync(System.Data.IDbTransaction)">
            <summary>
            异步查询所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetListWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetListTopWhere(System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询前多少条数据
            </summary>
            <param name="top">多少条数据</param>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetListWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步根据查询条件查询数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            同步新增实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.InsertAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步新增实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Insert(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            同步批量新增实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.InsertAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量新增实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Update(`0,`1,System.Data.IDbTransaction)">
            <summary>
            同步更新实体。
            </summary>
            <param name="entity">实体</param>
            <param name="id">主键ID</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.UpdateAsync(`0,`1,System.Data.IDbTransaction)">
            <summary>
            异步更新实体。
            </summary>
            <param name="entity">实体</param>
            <param name="id">主键ID</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Update(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            同步批量更新实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.UpdateAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量更新实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.UpdateTableField(System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            更新某一字段值
            </summary>
            <param name="strField">字段</param>
            <param name="fieldValue">字段值</param>
            <param name="where">条件,为空更新所有内容</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Delete(`0,System.Data.IDbTransaction)">
            <summary>
            同步物理删除实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步物理删除实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.Delete(`1,System.Data.IDbTransaction)">
            <summary>
            同步物理删除实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteAsync(`1,System.Data.IDbTransaction)">
            <summary>
            异步物理删除实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteBatch(System.Collections.Generic.IList{System.Object},System.Data.IDbTransaction)">
            <summary>
            按主键批量删除
            </summary>
            <param name="ids"></param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteBatchWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            按条件批量删除
            </summary>
            <param name="where">条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteSoft(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            同步软删除信息，将DeleteMark设置为1-删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteSoftAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步软删除信息，将DeleteMark设置为1-删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param> c
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.SetEnabledMark(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            设置数据有效性，将EnabledMark设置为1-有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.SetEnabledMarkAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步设置数据有效性，将EnabledMark设置为1:有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteAll(System.Data.IDbTransaction)">
            <summary>
            同步物理删除所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.DeleteAllAsync(System.Data.IDbTransaction)">
            <summary>
            异步物理删除所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsNotDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsNotEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsNotDeleteAndEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsNotDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsNotEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.GetAllByIsNotDeleteAndEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">是否降序</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.FindWithPagerSql(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询，自行封装sql语句
            </summary>
            <param name="condition">查询条件</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">排序方式 true为desc，false为asc</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IRepositories.IRepository`2.FindWithPagerRelationUser(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询包含用户信息
            查询主表别名为t1,用户表别名为t2，在查询字段需要注意使用t1.xxx格式，xx表示主表字段
            用户信息主要有用户账号：Account、昵称：NickName、真实姓名：RealName、头像：HeadIcon、手机号：MobilePhone
            输出对象请在Dtos中进行自行封装，不能是使用实体Model类
            </summary>
            <param name="condition">查询条件字段需要加表别名</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段，也需要加表别名</param>
            <param name="desc">排序方式</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.IServices.IService`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Get(`1,System.Data.IDbTransaction)">
            <summary>
            同步查询单个实体。
            </summary>
            <param name="id">主键</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAsync(`1,System.Data.IDbTransaction)">
            <summary>
            异步查询单个实体。
            </summary>
            <param name="id">主键</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            同步查询单个实体。
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步查询单个实体。
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetByIdRelationUser(System.String,System.Data.IDbTransaction)">
            <summary>
            查询对象，并返回关联的创建用户信息，
            查询表别名为s，条件要s.字段名
            </summary>
            <param name="id">主键Id</param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAll(System.Data.IDbTransaction)">
            <summary>
            同步查询所有实体。
            </summary>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllAsync(System.Data.IDbTransaction)">
            <summary>
            异步查询所有实体。
            </summary>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetListWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetListTopWhere(System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询前多少条数据
            </summary>
            <param name="top">多少条数据</param>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetListWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步根据查询条件查询数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            同步新增实体。
            </summary>
            <param name="entity">实体</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.InsertAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步新增实体。
            </summary>
            <param name="entity">实体</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Insert(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            同步批量新增实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.InsertAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量新增实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Update(`0,`1,System.Data.IDbTransaction)">
            <summary>
            同步更新实体。
            </summary>
            <param name="entity">实体</param>
            <param name="id">主键ID</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.UpdateAsync(`0,`1,System.Data.IDbTransaction)">
            <summary>
            异步更新实体。
            </summary>
            <param name="entity">实体</param>
            <param name="id">主键ID</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Update(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            同步批量更新实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.UpdateAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量更新实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.UpdateTableField(System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            更新某一字段值
            </summary>
            <param name="strField">字段</param>
            <param name="fieldValue">字段值</param>
            <param name="where">条件,为空更新所有内容</param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Delete(`0,System.Data.IDbTransaction)">
            <summary>
            同步物理删除实体。
            </summary>
            <param name="entity">实体</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步物理删除实体。
            </summary>
            <param name="entity">实体</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.Delete(`1,System.Data.IDbTransaction)">
            <summary>
            同步物理删除实体。
            </summary>
            <param name="id">主键</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteAsync(`1,System.Data.IDbTransaction)">
            <summary>
            异步物理删除实体。
            </summary>
            <param name="id">主键</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteBatch(System.Collections.Generic.IList{System.Object},System.Data.IDbTransaction)">
            <summary>
            按主键批量删除
            </summary>
            <param name="ids"></param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteBatchWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            按条件批量删除
            </summary>
            <param name="where">条件</param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteSoft(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            同步软删除信息，将DeleteMark设置为1-删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteSoftAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步软删除信息，将DeleteMark设置为1-删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param> c
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.SetEnabledMark(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            设置数据有效性，将EnabledMark设置为1-有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.SetEnabledMarkAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步设置数据有效性，将EnabledMark设置为1:有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteAll(System.Data.IDbTransaction)">
            <summary>
            同步物理删除所有实体。
            </summary>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.DeleteAllAsync(System.Data.IDbTransaction)">
            <summary>
            异步物理删除所有实体。
            </summary>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsNotDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsNotEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsNotDeleteAndEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsNotDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsNotEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.GetAllByIsNotDeleteAndEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="tran">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">是否降序</param>
            <param name="tran">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="tran">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="tran">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.FindWithPagerSql(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询，自行封装sql语句
            </summary>
            <param name="condition">查询条件</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">排序方式 true为desc，false为asc</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IServices.IService`2.FindWithPagerRelationUser(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询包含用户信息
            查询主表别名为t1,用户表别名为t2，在查询字段需要注意使用t1.xxx格式，xx表示主表字段
            用户信息主要有用户账号：Account、昵称：NickName、真实姓名：RealName、头像：HeadIcon、手机号：MobilePhone
            输出对象请在Dtos中进行自行封装，不能是使用实体Model类
            </summary>
            <param name="condition">查询条件字段需要加表别名</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段，也需要加表别名</param>
            <param name="desc">排序方式</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Models.BaseEntity`1">
            <summary>
            框架实体类的基类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.BaseEntity`1.#ctor">
            <summary>
            初始化一个<see cref="!:EntityBase&lt;TKey&gt;"/>类型的新实例
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.BaseEntity`1.Id">
            <summary>
            获取或设置 编号
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.BaseEntity`1.Equals(System.Object)">
            <summary>
            判断两个实体是否是同一数据记录的实体
            </summary>
            <param name="obj">要比较的实体信息</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Models.BaseEntity`1.IsKeyEqual(`0,`0)">
            <summary>
            实体ID是否相等
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.BaseEntity`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数。
            </summary>
            <returns>
            当前 <see cref="T:System.Object"/> 的哈希代码。<br/>
            如果<c>Id</c>为<c>null</c>则返回0，
            如果不为<c>null</c>则返回<c>Id</c>对应的哈希值
            </returns>
        </member>
        <member name="T:Yuebon.Commons.Models.IBaseEntity`1">
            <summary>
            数据模型接口
            </summary>
            <typeparam name="TKey">实体主键类型</typeparam>
        </member>
        <member name="P:Yuebon.Commons.Models.IBaseEntity`1.Id">
            <summary>
            获取 实体唯一标识，主键
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.ICreationAudited">
            <summary>
            定义创建审计信息：给实体添加创建时的 创建人CreatorUserId，创建时间CreatorTime 的审计信息，这些值将在数据层执行 创建Insert 时自动赋值。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.ICreationAudited.Id">
            <summary>
            主键ID
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.ICreationAudited.CreatorTime">
            <summary>
            获取或设置 创建日期
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.ICreationAudited.CreatorUserId">
            <summary>
            获取或设置 创建用户主键
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IDataAuthEnabled">
            <summary>
            定义数据权限的更新，删除状态
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IDataAuthEnabled.Updatable">
            <summary>
            获取或设置 是否可更新的数据权限状态
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IDataAuthEnabled.Deletable">
            <summary>
            获取或设置 是否可删除的数据权限状态
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IDeleteAudited">
            <summary>
             定义逻辑删除功能审计信息
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IDeleteAudited.DeleteMark">
            <summary>
            获取或设置 逻辑删除标记
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IDeleteAudited.DeleteUserId">
            <summary>
            获取或设置 删除实体的用户
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IDeleteAudited.DeleteTime">
            <summary>
            获取或设置 删除实体时间
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IEntityHash">
            <summary>
            定义实体Hash功能，对实体的属性值进行Hash，确定实体是否存在变化，
            这些变化可用于系统初始化时确定是否需要进行数据同步
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IExpirable">
            <summary>
            定义可过期性，包含生效时间和过期时间：给实体添加 生效时间BeginTime，过期时间EndTime 的属性
            </summary>
            <summary>
            定义可过期性，包含生效时间和过期时间
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IExpirable.BeginTime">
            <summary>
            获取或设置 生效时间
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IExpirable.EndTime">
            <summary>
            获取或设置 过期时间
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IInputDto`1">
            <summary>
            定义输入DTO
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:Yuebon.Commons.Models.IInputDto`1.Id">
            <summary>
            获取或设置 主键，唯一标识
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IModificationAudited">
            <summary>
            定义更新审计的信息
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IModificationAudited.LastModifyUserId">
            <summary>
            获取或设置 最后修改用户
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.IModificationAudited.LastModifyTime">
            <summary>
            获取或设置 最后修改时间
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.InputDtoValidateExtensions">
            <summary>
            <see cref="T:Yuebon.Commons.Models.IInputDto`1"/>验证扩展 
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.InputDtoValidateExtensions.Validate``1(System.Collections.Generic.IEnumerable{Yuebon.Commons.Models.IInputDto{``0}})">
            <summary>
            InputDto属性验证
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.InputDtoValidateExtensions.Validate``1(Yuebon.Commons.Models.IInputDto{``0})">
            <summary>
            InputDto属性验证
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.IOutputDto">
            <summary>
            定义输出DTO
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.CommonResult">
            <summary>
             公共返回结果对象
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.CommonResult.#ctor">
            <summary>
            BaseResult构造函数
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.CommonResult.#ctor(System.String,System.String)">
            <summary>
            BaseResult构造函数
            </summary>
            <param name="errmsg">错误消息</param>
            <param name="errcode">错误代码</param>
        </member>
        <member name="M:Yuebon.Commons.Models.CommonResult.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="errmsg">错误消息</param>
            <param name="success">成功或失败</param>
            <param name="errcode">错误代码</param>
        </member>
        <member name="F:Yuebon.Commons.Models.CommonResult.m_ErrCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Models.CommonResult.m_ErrMsg">
            <summary>
            错误描述信息
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Models.CommonResult.m_Success">
            <summary>
            成功或失败
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Models.CommonResult.m_ResData">
            <summary>
            用来传递的object内容
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.CommonResult.ErrCode">
            <summary>
            错误代码
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.CommonResult.ErrMsg">
            <summary>
            如果不成功，返回的错误描述信息
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.CommonResult.Success">
            <summary>
            成功返回true，失败返回false
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.CommonResult.ResData">
            <summary>
            用来传递的object内容
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.CommonResult`1">
            <summary>
            WEBAPI通用返回泛型基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Yuebon.Commons.Models.CommonResult`1.Result">
            <summary>
            回传的结果
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Models.TokenResult">
            <summary>
            Token返回结果对象
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Models.TokenResult.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.TokenResult.AccessToken">
            <summary>
            获取到的凭证值
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Models.TokenResult.ExpiresIn">
            <summary>
            凭证有效时间，单位：分钟
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Models.GrantType.Password">
            <summary>
            密码校验。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Models.GrantType.ClientCredentials">
            <summary>
            ClientCredential。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Module.MoudleService">
            <summary>
            
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Module.MoudleService.LoaderMoudleService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            实现应用模块程序集的注册服务
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Repositories.OperationLogEventHandler">
            <summary>
            定义一个记录操作日志的事件处理
            </summary>
            <param name="userId">操作的用户ID</param>
            <param name="tableName">操作表名称</param>
            <param name="operationType">操作类型：增加、修改、删除、软删除</param>
            <param name="note">操作的详细记录信息</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Repositories.BaseRepository`2">
            <summary>
            基础仓储接口实现
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <typeparam name="TKey">实体主键类型</typeparam>
        </member>
        <member name="F:Yuebon.Commons.Repositories.BaseRepository`2.dbConfigName">
            <summary>
            数据库配置名称
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.DbConfigName">
            <summary>
            数据库配置名称，默认为空。
            可在子类指定不同的配置名称，用于访问不同的数据库
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.ParameterPrefix">
            <summary>
            数据库参数化访问的占位符
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.SafeFieldFormat">
            <summary>
            防止和保留字、关键字同名的字段格式，如[value]。
            不同数据库类型的BaseDAL需要进行修改
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.SortField">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.IsDescending">
            <summary>
            是否为降序
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.SelectedFields">
            <summary>
            选择的字段，默认为所有(*)
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.TableName">
            <summary>
            数据库访问对象的表名
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.PrimaryKey">
            <summary>
            数据库访问对象的外键约束
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Repositories.BaseRepository`2.UnitOfWork">
            <summary>
            获取 当前单元操作对象
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.SetDbConfigName(System.String)">
            <summary>
            设置数据库配置项名称
            </summary>
            <param name="dbConfigName">数据库配置项名称</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.#ctor(System.String,System.String)">
            <summary>
            指定表名以及主键,对基类进构造
            </summary>
            <param name="tableName">表名</param>
            <param name="primaryKey">表主键</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.#ctor(System.String,System.String,System.String)">
            <summary>
            指定数据库连接配置、表名以及主键,对基类进构造
            </summary>
            <param name="_dbConfigName">数据库连接配置名称</param>
            <param name="_tableName">表名</param>
            <param name="_primaryKey">表主键</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.OpenSharedConnection">
            <summary>
            数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Get(`1,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAsync(`1,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="where"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="where"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetByIdRelationUser(System.String,System.Data.IDbTransaction)">
            <summary>
            查询对象，并返回关联的创建用户信息，
            查询表别名为s，条件要s.字段名
            </summary>
            <param name="id">主键Id</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAll(System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllAsync(System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetListWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetListWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件异步查询数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetListTopWhere(System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询前多少条数据
            </summary>
            <param name="top">多少条数据</param>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsNotDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsNotEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsNotDeleteAndEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsNotDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsNotEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetAllByIsNotDeleteAndEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">是否降序</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.FindWithPagerSql(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询，自行封装sql语句
            </summary>
            <param name="condition">查询条件</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">排序方式 true为desc，false为asc</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.FindWithPagerRelationUser(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询包含用户信息
            查询主表别名为t1,用户表别名为t2，在查询字段需要注意使用t1.xxx格式，xx表示主表字段
            用户信息主要有用户账号：Account、昵称：NickName、真实姓名：RealName、头像：HeadIcon、手机号：MobilePhone
            输出对象请在Dtos中进行自行封装，不能是使用实体Model类
            </summary>
            <param name="condition">查询条件字段需要加表别名</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段，也需要加表别名</param>
            <param name="desc">排序方式</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            新增
            </summary>
            <param name="entity"></param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.InsertAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步新增
            </summary>
            <param name="entity"></param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Insert(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            批量插入数据
            </summary>
            <param name="entities"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.InsertAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量插入数据
            </summary>
            <param name="entities"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Update(`0,`1,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="id"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.UpdateAsync(`0,`1,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="id"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Update(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            批量更新数据
            </summary>
            <param name="entities"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.UpdateAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量更新数据
            </summary>
            <param name="entities"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Delete(`0,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteAsync(`0,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteAll(System.Data.IDbTransaction)">
            <summary>
            物理删除所有数据
            </summary>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteAllAsync(System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Delete(`1,System.Data.IDbTransaction)">
            <summary>
            物理删除信息
            </summary>
            <param name="id"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteAsync(`1,System.Data.IDbTransaction)">
            <summary>
            异步物理删除信息
            </summary>
            <param name="id"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteBatch(System.Collections.Generic.IList{System.Object},System.Data.IDbTransaction)">
            <summary>
            按主键批量删除
            </summary>
            <param name="ids"></param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteBatchWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            按条件批量删除
            </summary>
            <param name="where">条件</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteByUser(`1,System.String,System.Data.IDbTransaction)">
            <summary>
            根据指定对象的ID和用户ID,从数据库中删除指定对象(用于记录人员的操作日志）
            </summary>
            <param name="id">指定对象的ID</param>
            <param name="userId">用户ID</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteByUserAsync(`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步根据指定对象的ID和用户ID,从数据库中删除指定对象(用于记录人员的操作日志）
            </summary>
            <param name="id">指定对象的ID</param>
            <param name="userId">用户ID</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteSoft(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            逻辑删除信息，将DeleteMark设置为1删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.DeleteSoftAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步逻辑删除信息，将DeleteMark设置为1删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.SetEnabledMark(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            设置数据有效性，将EnabledMark设置为1-有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.SetEnabledMarkAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步设置数据有效性，将EnabledMark设置为1:有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.UpdateTableField(System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            更新某一字段值
            </summary>
            <param name="strField">字段</param>
            <param name="fieldValue">字段值字符类型</param>
            <param name="where">条件,为空更新所有内容</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.UpdateTableField(System.String,System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            更新某一字段值
            </summary>
            <param name="strField">字段</param>
            <param name="fieldValue">字段值数字</param>
            <param name="where">条件,为空更新所有内容</param>
            <param name="trans">事务对象</param>
            <returns>执行成功返回<c>true</c>，否则为<c>false</c>。</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.OperationLogOfInsert(`0,System.Data.IDbTransaction)">
            <summary>
            插入操作的日志记录
            </summary>
            <param name="obj">数据对象</param>
            <param name="trans">事务对象</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.OperationLogOfUpdate(`0,`1,System.Data.IDbTransaction)">
            <summary>
            修改操作的日志记录
            </summary>
            <param name="id">记录ID</param>
            <param name="obj">数据对象</param>
            <param name="trans">事务对象</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.OperationLogOfSetEnable(`1,System.String,System.Boolean)">
            <summary>
            禁用或启用操作的日志记录
            </summary>
            <param name="id">记录ID</param>
            <param name="userId">用户ID</param>
            <param name="bltag">事务对象</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.OperationLogOfDelete(`1)">
            <summary>
            删除操作的日志记录
            </summary>
            <param name="id">记录ID</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.OperationLogOfDeleteSoft(`1,System.String,System.Data.IDbTransaction)">
            <summary>
            软删除操作的日志记录
            </summary>
            <param name="id">记录ID</param>
            <param name="userId">用户ID</param>
            <param name="trans">事务对象</param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetHashByEntity(`0)">
            <summary>
            将实体对象的属性值转化为Hashtable对应的键值(用于插入或者更新操作)
            (提供了默认的反射机制获取信息，为了提高性能，建议重写该函数)
            </summary>
            <param name="obj">有效的实体对象</param>
            <returns>包含键值映射的Hashtable</returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetColumnNameAlias">
            <summary>
            获取字段中文别名（用于界面显示）的字典集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.HasInjectionData(System.String)">
            <summary>
            验证是否存在注入代码(条件语句）
            </summary>
            <param name="inputData"></param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.GetRegexString">
            <summary>
            获取正则表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Yuebon.Commons.Repositories.BaseRepository`2.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Services.BaseService`2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="Tkey"></typeparam>
        </member>
        <member name="F:Yuebon.Commons.Services.BaseService`2.repository">
            <summary>
            
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.#ctor(Yuebon.Commons.IRepositories.IRepository{`0,`1})">
            <summary>
            
            </summary>
            <param name="iRepository"></param>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetByIdRelationUser(System.String,System.Data.IDbTransaction)">
            <summary>
            查询对象，并返回关联的创建用户信息，
            查询表别名为s，条件要s.字段名
            </summary>
            <param name="id">主键Id</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Delete(`0,System.Data.IDbTransaction)">
            <summary>
            同步物理删除实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Delete(`1,System.Data.IDbTransaction)">
            <summary>
            同步物理删除实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteAsync(`1,System.Data.IDbTransaction)">
            <summary>
            异步物理删除实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteAll(System.Data.IDbTransaction)">
            <summary>
            同步物理删除所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteAllAsync(System.Data.IDbTransaction)">
            <summary>
            异步物理删除所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步物理删除实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteBatch(System.Collections.Generic.IList{System.Object},System.Data.IDbTransaction)">
            <summary>
            按主键批量删除
            </summary>
            <param name="ids"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteBatchWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            按条件批量删除
            </summary>
            <param name="where">条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteSoft(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            软删除信息，将DeleteMark设置为1-删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.DeleteSoftAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步软删除信息，将DeleteMark设置为1-删除，0-恢复删除
            </summary>
            <param name="bl">true为不删除，false删除</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Get(`1,System.Data.IDbTransaction)">
            <summary>
            同步查询单个实体。
            </summary>
            <param name="id">主键</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetWhere(System.String,System.Data.IDbTransaction)">
            <summary>
            同步查询单个实体。
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            异步查询单个实体。
            </summary>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetListTopWhere(System.Int32,System.String,System.Data.IDbTransaction)">
            <summary>
            根据查询条件查询前多少条数据
            </summary>
            <param name="top">多少条数据</param>
            <param name="where">查询条件</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAll(System.Data.IDbTransaction)">
            <summary>
            同步查询所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllAsync(System.Data.IDbTransaction)">
            <summary>
            异步步查询所有实体。
            </summary>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAsync(`1,System.Data.IDbTransaction)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetListWhere(System.String,System.Data.IDbTransaction)">
            <summary>
             根据查询条件查询数据
             </summary>
             <param name="where">查询条件</param>
             <param name="trans">事务对象</param>
             <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetListWhereAsync(System.String,System.Data.IDbTransaction)">
            <summary>
             异步根据查询条件查询数据
             </summary>
             <param name="where">查询条件</param>
             <param name="trans">事务对象</param>
             <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Insert(`0,System.Data.IDbTransaction)">
            <summary>
            同步新增实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.InsertAsync(`0,System.Data.IDbTransaction)">
            <summary>
            异步步新增实体。
            </summary>
            <param name="entity">实体</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Insert(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            同步批量新增实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.InsertAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量新增实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Update(`0,`1,System.Data.IDbTransaction)">
            <summary>
            同步更新实体。
            </summary>
            <param name="entity">实体</param>
            <param name="id">主键ID</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Update(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            同步批量更新实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.UpdateAsync(`0,`1,System.Data.IDbTransaction)">
            <summary>
            异步更新实体。
            </summary>
            <param name="entity">实体</param>
            <param name="id">主键ID</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.UpdateAsync(System.Collections.Generic.List{`0},System.Data.IDbTransaction)">
            <summary>
            异步批量更新实体。
            </summary>
            <param name="entities">实体集合</param>
            <param name="trans">事务对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.UpdateTableField(System.String,System.String,System.String,System.Data.IDbTransaction)">
            <summary>
            更新某一字段值
            </summary>
            <param name="strField">字段</param>
            <param name="fieldValue">字段值</param>
            <param name="where">条件,为空更新所有内容</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsNotDeleteMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsNotEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsNotDeleteAndEnabledMark(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询软删除的数据，如果查询条件为空，即查询所有软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsNotDeleteMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除的数据，如果查询条件为空，即查询所有未软删除的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询有效的数据，如果查询条件为空，即查询所有有效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsNotEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询无效的数据，如果查询条件为空，即查询所有无效的数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.GetAllByIsNotDeleteAndEnabledMarkAsync(System.String,System.Data.IDbTransaction)">
            <summary>
            查询未软删除且有效的数据，如果查询条件为空，即查询所有数据
            </summary>
            <param name="where">查询条件</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.SetEnabledMark(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            设置数据有效性，将EnabledMark设置为1:有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.SetEnabledMarkAsync(System.Boolean,`1,System.String,System.Data.IDbTransaction)">
            <summary>
            异步设置数据有效性，将EnabledMark设置为1:有效，0-为无效
            </summary>
            <param name="bl">true为有效，false无效</param>
            <param name="id">主键ID</param>
            <param name="userId">操作用户</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.FindWithPager(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            根据条件查询数据库,并返回对象集合(用于分页数据显示)
            </summary>
            <param name="condition">查询的条件</param>
            <param name="info">分页实体</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">是否降序</param>
            <param name="trans">事务对象</param>
            <returns>指定对象的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.FindWithPagerSql(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询，自行封装sql语句
            </summary>
            <param name="condition">查询条件</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段</param>
            <param name="desc">排序方式 true为desc，false为asc</param>
            <param name="trans"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.FindWithPagerRelationUser(System.String,Yuebon.Commons.Pages.PagerInfo,System.String,System.Boolean,System.Data.IDbTransaction)">
            <summary>
            分页查询包含用户信息
            查询主表别名为t1,用户表别名为t2，在查询字段需要注意使用t1.xxx格式，xx表示主表字段
            用户信息主要有用户账号：Account、昵称：NickName、真实姓名：RealName、头像：HeadIcon、手机号：MobilePhone
            输出对象请在Dtos中进行自行封装，不能是使用实体Model类
            </summary>
            <param name="condition">查询条件字段需要加表别名</param>
            <param name="info">分页信息</param>
            <param name="fieldToSort">排序字段，也需要加表别名</param>
            <param name="desc">排序方式</param>
            <param name="trans">事务</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Services.BaseService`2.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Yuebon.Commons.Data.Check">
            <summary>
            参数合法性检查类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言。</param>
            <param name="message">异常消息。</param>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <param name="value"></param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <typeparam name="TException">抛出的异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.NotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.NotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.NotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.NotNullOrEmpty``1(System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型。</typeparam>
            <param name="list"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.HasNoNulls``1(System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
            检查集合中没有包含值为null的项
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.LessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数<paramref name="canEqual"/>]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.GreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数<paramref name="canEqual"/>]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.Between``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="start">比较范围的起始值。</param>
            <param name="end">比较范围的结束值。</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.DirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常。
            </summary>
            <param name="directory"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.FileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="filename"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">当文件路径为null时</exception>
            <exception cref="T:System.IO.FileNotFoundException">当文件路径不存在时</exception>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.Validate``1(Yuebon.Commons.Models.IInputDto{``0},System.String)">
            <summary>
            检查<see cref="T:Yuebon.Commons.Models.IInputDto`1"/>各属性的合法性，否则抛出<see cref="!:ValidationException"/>异常
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Data.Check.Validate``2(``0[],System.String)">
            <summary>
            检查<see cref="T:Yuebon.Commons.Models.IInputDto`1"/>各属性的合法性，否则抛出<see cref="!:ValidationException"/>异常
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Dependency.DependencyAttribute">
            <summary>
            依赖注入行为特性
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Dependency.DependencyAttribute.#ctor(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            初始化一个<see cref="T:Yuebon.Commons.Dependency.DependencyAttribute"/>类型的新实例
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Dependency.DependencyAttribute.Lifetime">
            <summary>
            获取 生命周期类型，代替
            <see cref="!:ISingletonDependency"/>,<see cref="!:IScopeDependency"/>,<see cref="!:ITransientDependency"/>三个接口的作用
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Dependency.DependencyAttribute.TryAdd">
            <summary>
            获取或设置 是否为TryAdd方式注册，通常用于默认服务，当服务可能被替换时，应设置为true
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Dependency.DependencyAttribute.ReplaceExisting">
            <summary>
            获取或设置 是否替换已存在的服务实现，通常用于主要服务，当服务存在时即优先使用时，应设置为true
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Dependency.DependencyAttribute.AddSelf">
            <summary>
            获取或设置 是否注册自身类型，默认没有接口的类型会注册自身，当此属性值为true时，也会注册自身
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Dependency.IgnoreDependencyAttribute">
            <summary>
            标注了此特性的类，将忽略依赖注入自动映射
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Dependency.MultipleDependencyAttribute">
            <summary>
            标记允许多重注入，即一个接口可以注入多个实例
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Base64Util">
            <summary>
            基于Base64的加密编码辅助类，
            可以设置不同的密码表来获取不同的编码与解码
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.#ctor">
            <summary>
            构造函数，初始化编码表
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Base64Util.s_b64">
            <summary>
            
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.Encrypt(System.String)">
            <summary>
            使用默认的密码表加密字符串
            </summary>
            <param name="input">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.Decrypt(System.String)">
            <summary>
            使用默认的密码表解密字符串
            </summary>
            <param name="input">待解密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.GetStandardBase64">
            <summary>
            获取具有标准的Base64密码表的加密类
            </summary>
            <returns></returns>
        </member>
        <member name="F:Yuebon.Commons.Base64Util.m_codeTable">
            <summary>
            密码表
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Base64Util.m_pad">
            <summary>
            补码
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Base64Util.m_t1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Base64Util.m_t2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Base64Util.CodeTable">
            <summary>
            密码表
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Base64Util.Pad">
            <summary>
            补码
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.Encode(System.String)">
            <summary>
            返回编码后的字符串
            </summary>
            <param name="source">原字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.GetEC(System.Int32)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.Decode(System.String)">
            <summary>
            获得解码字符串
            </summary>
            <param name="source">原字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.DecodeUnit(System.Collections.Generic.List{System.Byte},System.Char[])">
            <summary>
            获得解码字符串
            </summary>
            <param name="byteArr"></param>
            <param name="chArray"></param>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.FindChar(System.Char)">
            <summary>
            
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.InitDict">
            <summary>
            初始化双向哈希字典
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.ValidateRepeat(System.String)">
            <summary>
            检查字符串中的字符是否有重复
            </summary>
            <param name="input">待检查字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Base64Util.ValidateEqualPad(System.String,System.String)">
            <summary>
            检查字符串是否包含补码字符
            </summary>
            <param name="input">待检查字符串</param>
            <param name="pad"></param>
        </member>
        <member name="T:Yuebon.Commons.Cryptography">
            <summary>
            用于webapi 生成票据使用，公开
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Cryptography.SHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:Yuebon.Commons.Cryptography.GetMD5_32(System.String)">
            <summary>
            获得32位的MD5加密
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Encrypt.DEncrypt">
            <summary>
            Encrypt 的加密/解密。
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Encrypt(System.String)">
            <summary>
            使用缺省密钥字符串加密string
            </summary>
            <param name="original">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Decrypt(System.String)">
            <summary>
            使用缺省密钥字符串解密string
            </summary>
            <param name="original">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Encrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串加密string
            </summary>
            <param name="original">原始文字</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>密文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Decrypt(System.String,System.String)">
            <summary>
            使用给定密钥字符串解密string
            </summary>
            <param name="original">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥字符串解密string,返回指定编码方式明文
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>明文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Decrypt(System.Byte[])">
            <summary>
            使用缺省密钥字符串解密byte[]
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Encrypt(System.Byte[])">
            <summary>
            使用缺省密钥字符串加密
            </summary>
            <param name="original">原始数据</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.MakeMD5(System.Byte[])">
            <summary>
            生成MD5摘要
            </summary>
            <param name="original">数据源</param>
            <returns>摘要</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="original">明文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.DEncrypt.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥解密数据
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="T:Yuebon.Commons.Encrypt.EncodeHelper">
            <summary>
            DES对称加解密、AES RijndaelManaged加解密、Base64加密解密、MD5加密等操作辅助类
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Encrypt.EncodeHelper.DEFAULT_ENCRYPT_KEY">
            <summary>
            注意DEFAULT_ENCRYPT_KEY的长度为8位(如果要增加或者减少key长度,调整IV的长度就是了) 
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DesEncrypt(System.String)">
            <summary>
            使用默认加密
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DesDecrypt(System.String)">
            <summary>
            使用默认解密
            </summary>
            <param name="strText">解密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DesEncrypt(System.String,System.String)">
            <summary> 
            加密字符串,注意strEncrKey的长度为8位
            </summary> 
            <param name="strText">待加密字符串</param> 
            <param name="strEncrKey">加密键</param> 
            <returns></returns> 
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DesDecrypt(System.String,System.String)">
            <summary> 
            解密字符串,注意strEncrKey的长度为8位
            </summary> 
            <param name="strText">待解密的字符串</param> 
            <param name="sDecrKey">解密键</param> 
            <returns>解密后的字符串</returns> 
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DesEncrypt(System.String,System.String,System.String)">
            <summary> 
            加密数据文件,注意strEncrKey的长度为8位
            </summary> 
            <param name="m_InFilePath">待加密的文件路径</param> 
            <param name="m_OutFilePath">输出文件路径</param> 
            <param name="strEncrKey">加密键</param> 
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DesDecrypt(System.String,System.String,System.String)">
            <summary> 
            解密数据文件,注意strEncrKey的长度为8位
            </summary> 
            <param name="m_InFilePath">待解密的文件路径</param> 
            <param name="m_OutFilePath">输出路径</param> 
            <param name="sDecrKey">解密键</param> 
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_Encrypt(System.String)">
            <summary>
            对称加密算法AES RijndaelManaged加密(RijndaelManaged（AES）算法是块式加密算法)
            </summary>
            <param name="encryptString">待加密字符串</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_Encrypt(System.String,System.String)">
            <summary>
            对称加密算法AES RijndaelManaged加密(RijndaelManaged（AES）算法是块式加密算法)
            </summary>
            <param name="encryptString">待加密字符串</param>
            <param name="encryptKey">加密密钥，须半角字符</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_Decrypt(System.String)">
            <summary>
            对称加密算法AES RijndaelManaged解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_Decrypt(System.String,System.String)">
            <summary>
            对称加密算法AES RijndaelManaged解密字符串
            </summary>
            <param name="decryptString">待解密的字符串</param>
            <param name="decryptKey">解密密钥,和加密密钥相同</param>
            <returns>解密成功返回解密后的字符串,失败返回空</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.GetSubString(System.String,System.Int32,System.String)">
            <summary>
            按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="startIndex">索引位置，以0开始</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_EncryptStrream(System.IO.FileStream,System.String)">
            <summary>
            加密文件流
            </summary>
            <param name="fs">文件流对象</param>
            <param name="encryptKey">加密键</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_DecryptStream(System.IO.FileStream,System.String)">
            <summary>
            解密文件流
            </summary>
            <param name="fs">文件流对象</param>
            <param name="decryptKey">解密键</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_EncryptFile(System.String,System.String)">
            <summary>
            对指定文件加密
            </summary>
            <param name="InputFile">输入文件</param>
            <param name="OutputFile">输出文件</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.AES_DecryptFile(System.String,System.String)">
            <summary>
            对指定的文件解压缩
            </summary>
            <param name="InputFile">输入文件</param>
            <param name="OutputFile">输出文件</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.Base64Encrypt(System.String)">
            <summary>
            Base64是一種使用64基的位置計數法。它使用2的最大次方來代表僅可列印的ASCII 字元。
            這使它可用來作為電子郵件的傳輸編碼。在Base64中的變數使用字元A-Z、a-z和0-9 ，
            這樣共有62個字元，用來作為開始的64個數字，最後兩個用來作為數字的符號在不同的
            系統中而不同。
            Base64加密
            </summary>
            <param name="str">Base64方式加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.Base64Decrypt(System.String)">
            <summary>
            Base64解密字符串
            </summary>
            <param name="str">待解密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.MD5Encrypt(System.String)">
            <summary> 
            使用MD5加密字符串
            </summary> 
            <param name="strText">待加密的字符串</param> 
            <returns>MD5加密后的字符串</returns> 
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.MD5EncryptHash(System.String)">
            <summary>
            使用MD5加密的Hash表
            </summary>
            <param name="input">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.MD5EncryptHashHex(System.String)">
            <summary>
            使用Md5加密为16进制字符串
            </summary>
            <param name="input">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.EncyptMD5_3_16(System.String)">
            <summary>
            MD5 三次加密算法.计算过程: (QQ使用)
            1. 验证码转为大写
            2. 将密码使用这个方法进行三次加密后,与验证码进行叠加
            3. 然后将叠加后的内容再次MD5一下,得到最终验证码的值
            </summary>
            <param name="s">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.SHA256(System.String)">
            <summary>
            SHA256函数
            </summary>
            <param name="str">原始字符串</param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.EncryptString(System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="input">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.EncodeHelper.DecryptString(System.String,System.Boolean)">
            <summary>
            解密加过密的字符串
            </summary>
            <param name="input">待解密的字符串</param>
            <param name="throwException">解密失败是否抛异常</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Encrypt.MD5Util">
            <summary>
            MD5各种长度加密字符、验证MD5等操作辅助类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.GetMD5_32(System.String)">
            <summary>
            获得32位的MD5加密
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.GetMD5_16(System.String)">
            <summary>
            获得16位的MD5加密
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.GetMD5_8(System.String)">
            <summary>
            获得8位的MD5加密
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.GetMD5_4(System.String)">
            <summary>
            获得4位的MD5加密
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.AddMD5Profix(System.String)">
            <summary>
            添加MD5的前缀，便于检查有无篡改
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.RemoveMD5Profix(System.String)">
            <summary>
            移除MD5的前缀
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.ValidateValue(System.String)">
            <summary>
            验证MD5前缀处理的字符串有无被篡改
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.AddMD5(System.String)">
            <summary>
            对给定文件路径的文件加上标签
            </summary>
            <param name="path">要加密的文件的路径</param>
            <returns>标签的值</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.CheckMD5(System.String)">
            <summary>
            对给定路径的文件进行验证，如果一致返回True，否则返回False
            </summary>
            <param name="path"></param>
            <returns>是否加了标签或是否标签值与内容值一致</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.MD5Util.MD5Buffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算文件的MD5值
            </summary>
            <param name="MD5File">MD5签名文件字符数组</param>
            <param name="index">计算起始位置</param>
            <param name="count">计算终止位置</param>
            <returns>计算结果</returns>
        </member>
        <member name="T:Yuebon.Commons.Encrypt.QQEncryptUtil">
            <summary>
            QQ密码加密操作辅助类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.QQEncryptUtil.EncodePasswordWithVerifyCode(System.String,System.String)">
            <summary>
            QQ根据密码及验证码对数据进行加密
            </summary>
            <param name="password">原始密码</param>
            <param name="verifyCode">验证码</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Encrypt.RSASecurityHelper">
            <summary>
            非对称加密、解密、验证辅助类
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Encrypt.RSASecurityHelper.DESENCRYPT_KEY">
            <summary>
            默认公钥。必须是8位字符的密钥字符串(不能有特殊字符)
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.GenerateRSAKey(System.String@,System.String@)">
            <summary>
            非对称加密生成的私钥和公钥 
            </summary>
            <param name="publicKey">公钥,必须是8位字符的密钥字符串(不能有特殊字符)</param>
            <param name="privateKey">私钥</param>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSAEncrypt(System.String)">
            <summary>
             非对称加密字符串数据，返回加密后的数据
            </summary>
            <param name="originalString">待加密的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSAEncrypt(System.Byte[])">
            <summary>
            非对称加密字节数组，返回加密后的数据
            </summary>
            <param name="originalBytes">待加密的字节数组</param>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSAEncrypt(System.String,System.String)">
            <summary>
            非对称加密字符串数据，返回加密后的数据
            </summary>
            <param name="originalString">待加密的字符串</param>
            <param name="publicKey">公钥,必须是8位字符的密钥字符串(不能有特殊字符)</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSAEncrypt(System.Byte[],System.String)">
            <summary>
            非对称加密字节数组，返回加密后的数据
            </summary>
            <param name="originalBytes">待加密的字节数组</param>
            <param name="publicKey">公钥,必须是8位字符的密钥字符串(不能有特殊字符)</param>
            <returns>返回加密后的数据</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSADecrypt(System.String,System.String)">
            <summary>
            非对称解密字符串，返回解密后的数据
            </summary>
            <param name="privateKey">私钥</param>
            <param name="encryptedString">待解密数据</param>
            <returns>返回解密后的数据</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSADecrypt(System.String,System.Byte[])">
            <summary>
            非对称解密字节数组，返回解密后的数据
            </summary>
            <param name="privateKey">私钥</param>
            <param name="encryptedBytes">待解密数据</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.RSAEncrypSignature(System.String,System.String)">
            <summary>
            使用非对称加密签名数据
            </summary>
            <param name="privateKey">私钥</param>
            <param name="originalString">待加密的字符串</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.Validate(System.String,System.String,System.String)">
            <summary>
            对私钥加密的字符串，使用公钥对其进行验证
            </summary>
            <param name="originalString">未加密的文本，如机器码</param>
            <param name="encrytedString">加密后的文本，如注册序列号</param>
            <param name="publicKey">非对称加密的公钥</param>
            <returns>如果验证成功返回True，否则为False</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.HashEncrypt(System.String)">
            <summary> Hash 加密 </summary>
            <param name="str2Hash"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.ComputeMD5(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="str">待加密字串</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.ComputeMD5Data(System.String)">
            <summary>
            MD5加密
            </summary>
            <param name="input">待加密字串</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.ComputeMD5Data(System.Byte[])">
            <summary>
            MD5加密
            </summary>
            <param name="data">待加密数据</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSASecurityHelper.ComputeMD5Data(System.IO.Stream)">
            <summary>
            MD5加密
            </summary>
            <param name="stream">待加密流</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSAUtils.TryGetKeyParameters(System.String,System.Boolean,System.Security.Cryptography.RSAParameters@)">
            <summary>
            从本地文件中读取用来签发Token的 RSA Key。
            </summary>
            <param name="filePath">存放密钥的文件夹路径</param>
            <param name="withPrivate"></param>
            <param name="keyParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Encrypt.RSAUtils.GenerateAndSaveKey(System.String)">
            <summary>
            生成并保存 RSA 公钥与私钥。
            </summary>
            <param name="filePath">存放密钥的文件夹路径</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Entity.IDbContext">
            <summary>
            定义数据上下文接口
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Entity.IDbContext.SaveChanges">
            <summary>
            提交数据上下文的变更
            </summary>
            <returns>操作影响的记录数</returns>
        </member>
        <member name="M:Yuebon.Commons.Entity.IDbContext.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步方式提交数据上下文的所有变更
            </summary>
            <param name="cancelToken">任务取消标识</param>
            <returns>操作影响的行数</returns>
        </member>
        <member name="T:Yuebon.Commons.Entity.IUnitOfWork">
            <summary>
            工作单元操作接口
            <para> 适合在以下情况使用:</para>
            <para>1 在同一事务中进行多表操作</para>
            <para>2 需要多表联合查询</para>
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Entity.IUnitOfWork.HasCommitted">
            <summary>
            获取 工作单元的事务是否已提交
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Exceptions.ExceptionExtensions">
            <summary>
            异常操作扩展
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.ExceptionExtensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
            <returns>格式化后的异常信息字符串</returns>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.ExceptionExtensions.ReThrow(System.Exception)">
            <summary>
            将异常重新抛出
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Exceptions.ExceptionMessage">
            <summary>
            异常信息封装类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.ExceptionMessage.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
            以自定义用户信息和异常对象实例化一个异常信息对象
            </summary>
            <param name="e">异常对象</param>
            <param name="userMessage">自定义用户信息</param>
            <param name="isHideStackTrace">是否隐藏异常堆栈信息</param>
        </member>
        <member name="P:Yuebon.Commons.Exceptions.ExceptionMessage.UserMessage">
            <summary>
            用户信息，用于报告给用户的异常消息
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Exceptions.ExceptionMessage.ExMessage">
            <summary>
            直接的Exception异常信息，即e.Message属性值
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Exceptions.ExceptionMessage.ErrorDetails">
            <summary>
            异常输出的详细描述，包含异常消息，规模信息，异常类型，异常源，引发异常的方法及内部异常信息
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.ExceptionMessage.ToString">
            <summary>
            返回表示当前 <see cref="T:System.Object"/> 的 <see cref="T:System.String"/>。
            </summary>
            <returns>
            <see cref="T:System.String"/>，表示当前的 <see cref="T:System.Object"/>。
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Yuebon.Commons.Exceptions.YuebonFWException">
            <summary>
            YuebonFW框架异常类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.YuebonFWException.#ctor">
            <summary>
            初始化<see cref="T:Yuebon.Commons.Exceptions.YuebonFWException"/>类的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.YuebonFWException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化<see cref="T:Yuebon.Commons.Exceptions.YuebonFWException"/>类的新实例。
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.YuebonFWException.#ctor(System.String,System.Exception)">
            <summary>
            使用异常消息与一个内部异常实例化一个<see cref="T:Yuebon.Commons.Exceptions.YuebonFWException"/>类的新实例
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">用于封装在<see cref="T:Yuebon.Commons.Exceptions.YuebonFWException"/>内部的异常实例</param>
        </member>
        <member name="M:Yuebon.Commons.Exceptions.YuebonFWException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用可序列化数据实例化一个<see cref="T:Yuebon.Commons.Exceptions.YuebonFWException"/>类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="T:Yuebon.Commons.Extend.ExtDate">
            <summary>
            日期扩展方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtDate.ToEasyString(System.DateTime)">
            <summary>
            格式：刚刚、几分钟前、几小时前、几天前、yyyy/MM/dd
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtDate.ToEasyStringDQ(System.DateTime)">
            <summary>
            格式：即将、几分钟后、几小时后、几天后、yyyy/MM/dd
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtDate.ToBrowseTime(System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtDate.ToEasyString(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtDate.ToEasyStringDQ(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extend.ExtInt">
            <summary>
            文件大小，较小的文件
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtInt.ToDisplayFileSize(System.Int32)">
            <summary>
            显示文件大小，X Byte、x Kb、xM、xG
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extend.Extlong">
            <summary>
            文件大小，较大的文件
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extend.Extlong.ToDisplayFileSize(System.Int64)">
            <summary>
            显示文件大小
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extend.ExtString">
            <summary>
            字符串处理
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.NoHTML(System.String)">
            <summary>
            过滤html格式
            </summary>
            <param name="Htmlstring"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.YuebonEditorJsonToHtml(System.String)">
            <summary>
            用于微信小程序编辑页面，将json字符串解析成html格式
            </summary>
            <param name="Jsonstring"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.YuebonHtmlToEditorJson(System.String)">
            <summary>
            用于微信小程序编辑页面，将html符串解析成json字格式
            </summary>
            <param name="htmlstring"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.FromJsonString``1(System.String)">
            <summary>
            将JSON字符串还原为对象
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="json">JSON字符串 </param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.FromJsonString(System.String,System.Type)">
            <summary>
            将JSON字符串还原为对象
            </summary>
            <param name="json">JSON字符串 </param>
            <param name="type">数据类型</param>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.Base64Encrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64加密，采用指定字符编码方式加密。
            </summary>
            <param name="input">待加密的明文</param>
            <param name="encode">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.Base64Encrypt(System.String)">
            <summary>
            Base64加密，采用UTF8编码方式加密。
            </summary>
            <param name="input">待加密的明文</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.Base64Decrypt(System.String)">
            <summary>
            Base64解密，采用UTF8编码方式解密。
            </summary>
            <param name="input">待解密的秘文</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.ExtString.Base64Decrypt(System.String,System.Text.Encoding)">
            <summary>
            Base64解密，采用指定字符编码方式解密。
            </summary>
            <param name="input">待解密的秘文</param>
            <param name="encode">字符的编码</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extend.Reflect`1">
            <summary>
            根据业务对象的类型进行反射操作辅助类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Yuebon.Commons.Extend.Reflect`1.Create(System.String,System.String)">
            <summary>
            根据参数创建对象实例
            </summary>
            <param name="sName">对象全局名称</param>
            <param name="sFilePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.Reflect`1.Create(System.String,System.String,System.Boolean)">
            <summary>
            根据参数创建对象实例
            </summary>
            <param name="sName">对象全局名称</param>
            <param name="sFilePath">文件路径</param>
            <param name="bCache">缓存集合</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extend.Reflect`1.CreateInstance(System.String,System.String)">
            <summary>
            根据全名和路径构造对象
            </summary>
            <param name="sName">对象全名</param>
            <param name="sFilePath">程序集路径</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.ApiDescriptionExtension">
            <summary>
            API描述器扩展
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ApiDescriptionExtension.GetAreaName(Microsoft.AspNetCore.Mvc.ApiExplorer.ApiDescription)">
            <summary>
            获取区域名称
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.CollectionExtensions">
            <summary>
            集合扩展方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Boolean)">
            <summary>
            如果条件成立，添加项
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.CollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},``0,System.Func{System.Boolean})">
            <summary>
            如果条件成立，添加项
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.CollectionExtensions.AddIfNotExist``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,System.Boolean})">
            <summary>
            如果不存在，添加项
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.CollectionExtensions.AddIfNotNull``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            如果不为空，添加项
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.CollectionExtensions.GetOrAdd``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            获取对象，不存在对使用委托添加对象
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Extensions.DateTimeExtensions">
            <summary>
            日期时间扩展
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.ToUniversalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable date/time value to UTC.
            </summary>
            <param name="dateTime">The nullable date/time</param>
            <returns>The nullable date/time in UTC</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.ToLocalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable UTC date/time value to local time.
            </summary>
            <param name="dateTime">The nullable UTC date/time</param>
            <returns>The nullable UTC date/time as local time</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.GetEvenHourDate(System.Nullable{System.DateTime})">
            <summary>
            Returns a date that is rounded to the next even hour above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 09:00:00. If the date's time is in the 23rd hour, the
            date's 'day' will be promoted, and the time will be set to 00:00:00.
            </p>
            </summary>
            <param name="dateTime">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.GetEvenMinuteDate(System.Nullable{System.DateTime})">
            <summary>
            Returns a date that is rounded to the next even minute above the given
            date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:14:00. If the date's time is in the 59th minute,
            then the hour (and possibly the day) will be promoted.
            </p>
            </summary>
            <param name="dateTime">The Date to round, if <see langword="null" /> the current time will  be used</param>
            <returns>The new rounded date</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.GetEvenMinuteDateBefore(System.Nullable{System.DateTime})">
            <summary>
            Returns a date that is rounded to the previous even minute below the
            given date.
            <p>
            For example an input date with a time of 08:13:54 would result in a date
            with the time of 08:13:00.
            </p>
            </summary>
            <param name="dateTime">the Date to round, if <see langword="null" /> the current time will
            be used</param>
            <returns>the new rounded date</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            Get the first day of the month for
            any full date submitted
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            Get the last day of the month for any
            full date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.ToUnixTime(System.DateTime)">
            <summary>Epoch time. Number of seconds since midnight (UTC) on 1st January 1970.</summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.DateTimeExtensions.FromUnixTime(System.Int64)">
            <summary>UTC date based on number of seconds since midnight (UTC) on 1st January 1970.</summary>
        </member>
        <member name="T:Yuebon.Commons.Extensions.EnumerableExtensions">
            <summary>
            Enumerable集合扩展方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            打乱一个集合的项顺序
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <param name="separator"> 分隔符，默认为逗号 </param>
            <returns> 拼接后的字符串 </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            循环集合的每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <param name="collection">待处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separator">分隔符，默认为逗号</param>
            <typeparam name="T">泛型类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合是否为空
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 为空返回True，不为空返回False </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            根据第三方条件是否为真来决定是否执行指定条件的查询
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="source">要操作的源</param>
            <param name="keySelector">重复数据筛选条件</param>
            <returns>不重复元素的集合</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段与排序方式进行排序
            </summary>
            <typeparam name="T">集合项类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns>排序后的数据集</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Yuebon.Commons.Filter.SortCondition)">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Yuebon.Commons.Filter.SortCondition{``0})">
            <summary>
            把<see cref="T:System.Collections.Generic.IEnumerable`1"/>集合按指定字段排序条件进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            把<see cref="T:System.Linq.IOrderedQueryable`1"/>集合继续按指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="propertyName">排序属性名</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.EnumerableExtensions.ThenBy``1(System.Linq.IOrderedEnumerable{``0},Yuebon.Commons.Filter.SortCondition)">
            <summary>
            把<see cref="T:System.Linq.IOrderedEnumerable`1"/>集合继续指定字段排序方式进行排序
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <param name="source">要排序的数据集</param>
            <param name="sortCondition">列表字段排序条件</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.GenericExtension">
            <summary>
            泛型扩展
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.GenericExtension.ParseTo``1(System.String)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回默认值。
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <returns>返回指定的类型。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.GenericExtension.ParseTo``1(System.String,``0)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回默认值。
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <param name="defaultValue">如果转换失败，需要使用的默认值</param>
            <returns>返回指定的类型。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.GenericExtension.ParseToNullable``1(System.String)">
            <summary>
                将字符串转换为指定的类型，如果转换不成功，返回null
            </summary>
            <typeparam name="T">结构体类型或枚举类型</typeparam>
            <param name="str">需要转换的字符串</param>
            <returns>返回指定的类型</returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.ObjectExtension">
            <summary>
            对象自定义扩展类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToDataSet``1(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToListSet``1(``0,System.Boolean)">
            <summary>
            将实例转换为集合数据集。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToXmlDocument``1(``0)">
            <summary>
            将可序列化实例转换为XmlDocument。
            </summary>
            <typeparam name="T">实例类型。</typeparam>
            <param name="o">实例。</param>
            <returns>XmlDocument。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Type,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="t">转换的元素类型。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ListToDataSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <typeparam name="T">转换的元素类型。</typeparam>
            <param name="list">集合。</param>
            <param name="generic">是否生成泛型数据集。</param>
            <returns>数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ListToDataSet(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            将集合转换为数据集。
            </summary>
            <param name="list">集合。</param>
            <param name="generic">是否转换为字符串形式。</param>
            <returns>转换后的数据集。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetData(System.Data.DataSet)">
            <summary>
            获取DataSet第一表，第一行，第一列的值。
            </summary>
            <param name="ds">DataSet数据集。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetData(System.Data.DataTable)">
            <summary>
            获取DataTable第一行，第一列的值。
            </summary>
            <param name="dt">DataTable数据集表。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetData(System.Data.DataSet,System.String)">
            <summary>
            获取DataSet第一个匹配columnName的值。
            </summary>
            <param name="ds">数据集。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetData(System.Data.DataTable,System.String)">
            <summary>
            获取DataTable第一个匹配columnName的值。
            </summary>
            <param name="dt">数据表。</param>
            <param name="columnName">列名。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToString(System.Object,System.String)">
            <summary>
            将object转换为string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToString(System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            将DateTime?转换为string类型信息。
            </summary>
            <param name="o">DateTime?。</param>
            <param name="format">标准或自定义日期和时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToString(System.Nullable{System.TimeSpan},System.String,System.String)">
            <summary>
            将TimeSpan?转换为string类型信息。
            </summary>
            <param name="o">TimeSpan?。</param>
            <param name="format">标准或自定义时间格式的字符串。</param>
            <param name="t">默认值。</param>
            <returns>string。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToSubString(System.Object,System.Int32,System.Int32,System.String)">
            <summary>
            将object转换为截取后的string类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
            <param name="length">子字符串中的字符数。</param>
            <param name="suffix">后缀。如果没有截取则不添加。</param>
            <returns>截取后的string类型信息。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToByte(System.Object,System.Byte)">
            <summary>
            将object转换为byte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>byte。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToChar(System.Object,System.Char)">
            <summary>
            将object转换为char类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>char。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToInt(System.Object,System.Int32)">
            <summary>
            将object转换为int类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>int。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToDouble(System.Object,System.Double)">
            <summary>
            将object转换为double类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>double。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将object转换为decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToFloat(System.Object,System.Single)">
            <summary>
            将object转换为float类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>float。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToLong(System.Object,System.Int64)">
            <summary>
            将object转换为long类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>long。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToBool(System.Object,System.Boolean)">
            <summary>
            将object转换为bool类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToSbyte(System.Object,System.SByte)">
            <summary>
            将object转换为sbyte类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>sbyte。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToShort(System.Object,System.Int16)">
            <summary>
            将object转换为short类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>short。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToUShort(System.Object,System.UInt16)">
            <summary>
            将object转换为ushort类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ushort。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToULong(System.Object,System.UInt64)">
            <summary>
            将object转换为ulong类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>ulong。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToEnum``1(System.Object,``0)">
            <summary>
            将object转换为Enum[T]类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Enum[T]。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为DateTime类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToTimeSpan(System.Object,System.TimeSpan)">
            <summary>
            将object转换为TimeSpan类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>TimeSpan。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToGuid(System.Object,System.Guid)">
            <summary>
            将object转换为Guid类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>Guid。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetBool(System.Object)">
            <summary>
            从object中获取bool类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>bool。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetInt(System.Object)">
            <summary>
            从object中获取int类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>int。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetDecimal(System.Object)">
            <summary>
            从object中获取decimal类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetDouble(System.Object)">
            <summary>
            从object中获取double类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>double。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetPositiveNumber(System.Object)">
            <summary>
            从object中获取正数信息。
            </summary>
            <param name="o">object。</param>
            <returns>decimal。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetDateTime(System.Object)">
            <summary>
            从object中获取DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetTimeSpan(System.Object)">
            <summary>
            从object中获取TimeSpan?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>TimeSpan?。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetGuid(System.Object)">
            <summary>
            从object中获取Guid?类型信息。
            </summary>
            <param name="o">object。</param>
            <returns>Guid?。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetSqlDateTime(System.Object,System.DateTime)">
            <summary>
            将object转换为SqlServer中的DateTime?类型信息。
            </summary>
            <param name="o">object。</param>
            <param name="t">默认值。</param>
            <returns>DateTime?。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.Value(System.Xml.Linq.XElement,System.String)">
            <summary>
            读取XElement节点的文本内容。
            </summary>
            <param name="xElement">XElement节点。</param>
            <param name="t">默认值。</param>
            <returns>文本内容。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetFirstOrDefaultValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取与指定键相关或者第一个的值。
            </summary>
            <typeparam name="TKey">键类型。</typeparam>
            <typeparam name="TValue">值类型。</typeparam>
            <param name="dictionary">表示键/值对象的泛型集合。</param>
            <param name="key">键。</param>
            <param name="t">默认值。</param>
            <returns>值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.Element(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            获取具有指定 System.Xml.Linq.XName 的第一个（按文档顺序）子元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回同名默认值。</param>
            <returns>与指定 System.Xml.Linq.XName 匹配的 System.Xml.Linq.XElement，或者为 null。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的子元素集合。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含此System.Xml.Linq.XContainer 的子元素，或者非空默认值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.Elements(System.Xml.Linq.XContainer,System.Xml.Linq.XName,System.Boolean)">
            <summary>
            按文档顺序返回此元素或文档的经过筛选的子元素集合。集合中只包括具有匹配 System.Xml.Linq.XName 的元素。
            </summary>
            <param name="xContainer">XContainer。</param>
            <param name="xName">要匹配的 System.Xml.Linq.XName。</param>
            <param name="t">是否返回非空默认值。</param>
            <returns>System.Xml.Linq.XElement 的按文档顺序包含具有匹配System.Xml.Linq.XName 的 System.Xml.Linq.XContainer 的子级，或者非空默认值。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.RemoveHTMLTags(System.String)">
            <summary>
            删除html标签。
            </summary>
            <param name="html">输入的字符串。</param>
            <returns>没有html标签的字符串。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToFileName(System.String)">
            <summary>
            字符串转换为文件名。
            </summary>
            <param name="s">字符串。</param>
            <returns>文件名。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.GetMonday(System.DateTime)">
            <summary>
            获取星期一的日期。
            </summary>
            <param name="dateTime">日期。</param>
            <returns>星期一的日期。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.DefaultStringIfEmpty(System.String,System.String[])">
            <summary>
            获取默认非空字符串。
            </summary>
            <param name="s">首选默认非空字符串。</param>
            <param name="args">依次非空字符串可选项。</param>
            <returns>默认非空字符串。若无可选项则返回string.Empty。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.Text.RegularExpressions.Regex,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToUrlEncodeString(System.String,System.String,System.Text.Encoding)">
            <summary>
            对 URL 字符串进行编码。
            </summary>
            <param name="s">要编码的文本。</param>
            <param name="regex">匹配要编码的文本。</param>
            <param name="encoding">指定编码方案的 System.Text.Encoding 对象。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.ToUnixTimeStamp(System.DateTime)">
            <summary>
            将日期转换为UNIX时间戳字符串
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.IsMobile(System.String)">
            <summary>
            判断当前字符串是否是移动电话号码
            </summary>
            <param name="mobile"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.IsEmail(System.String)">
            <summary>
            判断当前字符串是否为邮箱
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.CastTo(System.Object,System.Type)">
            <summary>
            把对象类型转换为指定类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.CastTo``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ObjectExtension.CastTo``1(System.Object,``0)">
            <summary>
            把对象类型转化为指定类型，转化失败时返回指定的默认值
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <param name="defaultValue"> 转化失败返回的指定默认值 </param>
            <returns> 转化后的指定类型对象，转化失败时返回指定的默认值 </returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.Result`1">
            <summary>
            结果。
            </summary>
            <typeparam name="T">结果返回值类型。</typeparam>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Flag">
            <summary>
            标记。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Return">
            <summary>
            返回值。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Message">
            <summary>
            消息。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Exception">
            <summary>
            异常。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.DateTime">
            <summary>
            时间。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Int">
            <summary>
            整型数据。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Decimal">
            <summary>
            浮点数据。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Bool">
            <summary>
            布尔数据。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Extensions.Result`1.Object">
            <summary>
            对象。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Extensions.Flag">
            <summary>
            标记。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Extensions.Flag.Default">
            <summary>
            默认。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Extensions.Flag.True">
            <summary>
            真。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Extensions.Flag.False">
            <summary>
            假。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Extensions.ParameterCheckExtensions">
            <summary>
            用于参数检查的扩展方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言。</param>
            <param name="message">异常消息。</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为值抛出<see cref="T:System.Exception"/>异常
            </summary>
            <param name="value"></param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <typeparam name="TException">抛出的异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid值不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常。
            </summary>
            <typeparam name="T">集合项的类型。</typeparam>
            <param name="collection"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于，参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="target">要比较的值。</param>
            <param name="canEqual">是否可等于。</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常。
            </summary>
            <typeparam name="T">参数类型。</typeparam>
            <param name="value"></param>
            <param name="paramName">参数名称。</param>
            <param name="start">比较范围的起始值。</param>
            <param name="end">比较范围的结束值。</param>
            <param name="startEqual">是否可等于起始值</param>
            <param name="endEqual">是否可等于结束值</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常。
            </summary>
            <param name="directory"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.IO.DirectoryNotFoundException"></exception>
        </member>
        <member name="M:Yuebon.Commons.Extensions.ParameterCheckExtensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常。
            </summary>
            <param name="filename"></param>
            <param name="paramName">参数名称。</param>
            <exception cref="T:System.ArgumentNullException">当文件路径为null时</exception>
            <exception cref="T:System.IO.FileNotFoundException">当文件路径不存在时</exception>
        </member>
        <member name="T:Yuebon.Commons.Extensions.SessionExtensions">
            <summary>
            Session 扩展函数,直接将实体类序列化成json存储和读取
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.SessionExtensions.Set(Microsoft.AspNetCore.Http.ISession,System.String,System.Object)">
            <summary>
            设置session值
            </summary>
            <param name="session"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.SessionExtensions.Get``1(Microsoft.AspNetCore.Http.ISession,System.String)">
            <summary>
            获取session
            </summary>
            <typeparam name="T"></typeparam>
            <param name="session"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.SqlBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Extensions.StringExtensions">
            <summary>
            用于字符串转换其他类型的扩展函数
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.ParseTo(System.String,System.String)">
            <summary>
            字符数据类型转换其他数据类型
            </summary>
            <param name="str">字符串</param>
            <param name="type">要转换的数据类</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.ReplaceWhitespace(System.String,System.String)">
            <summary>
                替换空格字符
            </summary>
            <param name="input"></param>
            <param name="replacement">替换为该字符</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
                返回一个值，该值指示指定的 String 对象是否出现在此字符串中。
            </summary>
            <param name="source"></param>
            <param name="value">要搜寻的字符串。</param>
            <param name="comparisonType">指定搜索规则的枚举值之一。</param>
            <returns>如果 value 参数出现在此字符串中则为 true；否则为 false。</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.StripHtml(System.String,System.Int32)">
            <summary>
                清除 Html 代码，并返回指定长度的文本。(连续空行或空格会被替换为一个)
            </summary>
            <param name="text"></param>
            <param name="maxLength">返回的文本长度（为0返回所有文本）</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsEmpty(System.Object)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.ToDelimitedList``1(System.String,System.String)">
            <summary>
            字符串转换为指定格式的列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">字符串内容</param>
            <param name="delimiter">分隔符号</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.ToDelimitedList``1(System.String,System.String,System.Func{System.String,``0})">
            <summary>
            字符串转换为指定格式的列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">字符串内容</param>
            <param name="delimiter">分隔符号</param>
            <param name="converter">提供的转换操作</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.SplitEvery(System.String,System.Int32)">
            <summary>
            根据长度分割不同的字符串到列表里面
            </summary>
            <param name="value">字符串内容</param>
            <param name="length">分割的长度</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.ToBase64String(System.Byte[])">
            <summary>
            将<see cref="T:System.Byte"/>[]数组转换为Base64字符串
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.ToBase64String(System.String,System.Text.Encoding)">
            <summary>
            将字符串转换为Base64字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="source">正常的字符串</param>
            <param name="encoding">编码</param>
            <returns>Base64字符串</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsValidEmailAddress(System.String)">
            <summary>
            true, if is valid email address
            </summary>
            <param name="s">email address to test</param>
            <returns>true, if is valid email address</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsValidUrl(System.String)">
            <summary>
            Checks if url is valid. 
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.UrlAvailable(System.String)">
            <summary>
            Check if url (http) is available.
            </summary>
            <param name="httpUri">url to check</param>
            <example>
            string url = "www.codeproject.com;
            if( !url.UrlAvailable())
                ...codeproject is not available
            </example>
            <returns>true if available</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.Reverse(System.String)">
            <summary>
            Reverse the string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.Reduce(System.String,System.Int32,System.String)">
            <summary>
            Reduce string to shorter preview which is optionally ended by some string (...).
            </summary>
            <param name="s">string to reduce</param>
            <param name="count">Length of returned string including endings.</param>
            <param name="endings">optional edings of reduced text</param>
            <example>
            string description = "This is very long description of something";
            string preview = description.Reduce(20,"...");
            produce -> "This is very long..."
            </example>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.RemoveSpaces(System.String)">
            <summary>
            remove white space, not line end
            Useful when parsing user input such phone,
            price int.Parse("1 000 000".RemoveSpaces(),.....
            </summary>
            <param name="s"></param>
            <param name="value">string without spaces</param>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsNumber(System.String,System.Boolean)">
            <summary>
            true, if the string can be parse as Double respective Int32
            Spaces are not considred.
            </summary>
            <param name="s">input string</param>
            <param name="floatpoint">true, if Double is considered,
            otherwhise Int32 is considered.</param>
            <returns>true, if the string contains only digits or float-point</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.IsNumberOnly(System.String,System.Boolean)">
            <summary>
            true, if the string contains only digits or float-point.
            Spaces are not considred.
            </summary>
            <param name="s">input string</param>
            <param name="floatpoint">true, if float-point is considered</param>
            <returns>true, if the string contains only digits or float-point</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.RemoveDiacritics(System.String)">
            <summary>
            Remove accent from strings 
            </summary>
            <example>
             input:  "Příliš žluťoučký kůň úpěl ďábelské ódy."
             result: "Prilis zlutoucky kun upel dabelske ody."
            </example>
            <param name="s"></param>
            <remarks>founded at http://stackoverflow.com/questions/249087/
            how-do-i-remove-diacritics-accents-from-a-string-in-net</remarks>
            <returns>string without accents</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.Nl2Br(System.String)">
            <summary>
            Replace \r\n or \n by <br />
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.StringExtensions.MD5(System.String)">
            <summary>
            使用MD5加密字符串
            </summary>
            <param name="s">输入字符串</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Extensions.TypeExtensions">
            <summary>
            类型<see cref="T:System.Type"/>辅助扩展方法类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsDeriveClassFrom``1(System.Type,System.Boolean)">
            <summary>
            判断当前类型是否可由指定类型派生
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsDeriveClassFrom(System.Type,System.Type,System.Boolean)">
            <summary>
            判断当前类型是否可由指定类型派生
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetNonNullableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetUnNullableType(System.Type)">
            <summary>
            通过类型转换器获取Nullable类型的基础类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetDescription(System.Type,System.Boolean)">
            <summary>
            获取类型的Description特性描述信息
            </summary>
            <param name="type">类型对象</param>
            <param name="inherit">是否搜索类型的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回类型的全名</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">要检查的Attribute特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            方法是否是异步
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">要判断的基类型</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">要判断的基类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.GetFullNameWithModule(System.Type)">
            <summary>
            获取类型的全名，附带所在类库
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.ShortDisplayName(System.Type)">
            <summary>
            获取类型的显示短名称
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Extensions.TypeExtensions.DisplayName(System.Type,System.Boolean)">
            <summary>
            获取类型的显示名称
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Collections.ComparisonHelper`1">
            <summary>
            比较器辅助类，用于快速创建<see cref="T:System.Collections.Generic.IComparer`1"/>接口的实例
            </summary>
            <example>
            var comparer1 = Comparison[Person].CreateComparer(p => p.ID); var comparer2 = Comparison[Person].CreateComparer(p => p.Name); var comparer3 = Comparison[Person].CreateComparer(p => p.Birthday.Year)
            </example>
            <typeparam name="T">要比较的类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Collections.ComparisonHelper`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Filters.GlobalExceptionFilter">
            <summary>
            异常过滤器，将异常写入日志
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Filter.CollectionPropertySorter`1">
            <summary>
            集合类型字符串排序操作类
            </summary>
            <typeparam name="T">集合项类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.Filter.CollectionPropertySorter`1.OrderBy(System.Collections.Generic.IEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Collections.Generic.IEnumerable`1"/>序列进行排序
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:Yuebon.Commons.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedEnumerable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedEnumerable`1"/>进行继续排序
            </summary>
            <param name="source"><see cref="T:System.Linq.IOrderedEnumerable`1"/>序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
        </member>
        <member name="M:Yuebon.Commons.Filter.CollectionPropertySorter`1.OrderBy(System.Linq.IQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Filter.CollectionPropertySorter`1.ThenBy(System.Linq.IOrderedQueryable{`0},System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            按指定的属性名称对<see cref="T:System.Linq.IOrderedQueryable`1"/>序列进行排序
            </summary>
            <param name="source">IOrderedQueryable{T}序列</param>
            <param name="propertyName">属性名称</param>
            <param name="sortDirection">排序方向</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Filter.SortCondition">
            <summary>
            列表字段排序条件
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Filter.SortCondition.#ctor">
            <summary>
            初始化一个<see cref="T:Yuebon.Commons.Filter.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Filter.SortCondition.#ctor(System.String)">
            <summary>
            构造一个指定字段名称的升序排序的排序条件
            </summary>
            <param name="sortField">字段名称</param>
        </member>
        <member name="M:Yuebon.Commons.Filter.SortCondition.#ctor(System.String,System.ComponentModel.ListSortDirection)">
            <summary>
            构造一个排序字段名称和排序方式的排序条件
            </summary>
            <param name="sortField">字段名称</param>
            <param name="listSortDirection">排序方式</param>
        </member>
        <member name="P:Yuebon.Commons.Filter.SortCondition.SortField">
            <summary>
            获取或设置 排序字段名称
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Filter.SortCondition.ListSortDirection">
            <summary>
            获取或设置 排序方向
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Filter.SortCondition`1">
            <summary>
            支持泛型的列表字段排序条件
            </summary>
            <typeparam name="T">列表元素类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.Filter.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            使用排序字段 初始化一个<see cref="T:Yuebon.Commons.Filter.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Filter.SortCondition`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.ComponentModel.ListSortDirection)">
            <summary>
            使用排序字段与排序方式 初始化一个<see cref="T:Yuebon.Commons.Filter.SortCondition"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Filter.SortCondition`1.GetPropertyName(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            从泛型委托获取属性名
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Finders.FinderBase`1">
            <summary>
            查找器基类
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Finders.FinderBase`1.ItemsCache">
            <summary>
            项缓存
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Finders.FinderBase`1.Found">
            <summary>
            是否已查找过
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Finders.FinderBase`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Finders.FinderBase`1.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Finders.FinderBase`1.FindAllItems">
            <summary>
            重写以实现所有项的查找
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Finders.IFinder`1">
            <summary>
            定义一个查找器
            </summary>
            <typeparam name="TItem">要查找的项类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.Finders.IFinder`1.Find(System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Finders.IFinder`1.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Helpers.AppVersionHelper">
            <summary>
            应用版本号、软件厂商等信息
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Helpers.AppVersionHelper.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Helpers.AppVersionHelper.Manufacturer">
            <summary>
            软件厂商
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Helpers.AppVersionHelper.WebSite">
            <summary>
            网站地址
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Helpers.AppVersionHelper.UpdateUrl">
            <summary>
            更新地址
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ByteConvertHelper.Object2Bytes(System.Object)">
            <summary>
            将对象转换为byte数组
            </summary>
            <param name="obj">被转换对象</param>
            <returns>转换后byte数组</returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ByteConvertHelper.Bytes2Object(System.Byte[])">
            <summary>
            将byte数组转换成对象
            </summary>
            <param name="buff">被转换byte数组</param>
            <returns>转换完成后的对象</returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ByteConvertHelper.Bytes2Object``1(System.Byte[])">
            <summary>
            将byte数组转换成对象
            </summary>
            <param name="buff">被转换byte数组</param>
            <returns>转换完成后的对象</returns>
        </member>
        <member name="T:Yuebon.Commons.Helpers.CacheKey">
            <summary>
            缓存对象
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Helpers.ConvertHelper">
            <summary>
            处理数据类型转换，数制转换、编码转换相关的类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数。
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值。</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值。</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.isBaseNumber(System.Int32)">
            <summary>
            判断是否是 2 8 10 16
            </summary>
            <param name="baseNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.StringToBytes(System.String)">
            <summary>
            将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="text">要转换的字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.BytesToString(System.Byte[])">
            <summary>
            将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            使用指定字符集将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.BytesToInt32(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="data">需要转换成整数的byte数组</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToInt32``1(``0,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToInt32(System.String,System.Int32)">
            <summary>
            将数据转换为整型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToInt32(System.Object,System.Int32)">
            <summary>
            将数据转换为整型  转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToBoolean``1(``0,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToBoolean(System.String,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将数据转换为布尔类型  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToFloat``1(``0,System.Single)">
            <summary>
            将数据转换为单精度浮点型  转换失败 返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToFloat(System.Object,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToFloat(System.String,System.Single)">
            <summary>
            将数据转换为单精度浮点型   转换失败返回默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDouble``1(``0,System.Double)">
            <summary>
            将数据转换为双精度浮点型   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDouble``1(``0,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位   转换失败返回默认值
            </summary>
            <typeparam name="T">数据的类型</typeparam>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDouble(System.Object,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDouble(System.String,System.Double)">
            <summary>
            将数据转换为双精度浮点型  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDouble(System.Object,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDouble(System.String,System.Int32,System.Double)">
            <summary>
            将数据转换为双精度浮点型,并设置小数位  转换失败返回默认值
            </summary>
            <param name="data">要转换的数据</param>
            <param name="decimals">小数的位数</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ConvertTo(System.Object,System.Type)">
            <summary>
            将数据转换为指定类型
            </summary>
            <param name="data">转换的数据</param>
            <param name="targetType">转换的目标类型</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ConvertTo``1(System.Object)">
            <summary>
            将数据转换为指定类型
            </summary>
            <typeparam name="T">转换的目标类型</typeparam>
            <param name="data">转换的数据</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDecimal``1(``0,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDecimal(System.Object,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDecimal(System.String,System.Decimal)">
            <summary>
            将数据转换为Decimal  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDateTime``1(``0,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回默认值
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDateTime(System.Object,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ToDateTime(System.String,System.DateTime)">
            <summary>
            将数据转换为DateTime  转换失败返回 默认值
            </summary>
            <param name="data">数据</param>
            <param name="defValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ConvertToSBC(System.String)">
             <summary>
             转全角的函数(SBC case)
             </summary>
             <param name="input">任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ConvertHelper.ConvertToDBC(System.String)">
             <summary> 转半角的函数(DBC case) </summary>
             <param name="input">任意字符串</param>
             <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="T:Yuebon.Commons.Helpers.CookiesHelper">
            <summary>
            Cookie操作类
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Helpers.GuidUtils">
            <summary>  
            Guid工具类  
            </summary>  
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.GuId">
            <summary>
            表示全局唯一标识符 (GUID)。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.CreateNo">
            <summary>
            自动生成编号/唯一订单号生成  201808251145409865
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.upper(System.String)">
            <summary>  
            获取一个大写的字符串  
            </summary>  
            <param name="str"></param>  
            <returns></returns>  
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.NewGuidFormatN(System.Boolean)">
            <summary>  
            获取32位不包含“-”号的GUID字符串  
            </summary>  
            <returns></returns>  
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.NewGuidFormatD(System.Boolean)">
            <summary>  
            获取32位包含“-”号的GUID字符串  
            </summary>  
            <param name="isUpper"></param>  
            <returns></returns>  
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.NewGuidFormatP(System.Boolean)">
            <summary>  
            获取32位包含“-”号的GUID被“(”、“)”包括的字符串  
            </summary>  
            <param name="isUpper"></param>  
            <returns></returns>  
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.NewGuidFormatB(System.Boolean)">
            <summary>  
            获取32位包含“-”号的GUID被“{”、“}”包括的字符串  
            </summary>  
            <param name="isUpper"></param>  
            <returns></returns>  
        </member>
        <member name="M:Yuebon.Commons.Helpers.GuidUtils.NewGuidFormatX(System.Boolean)">
            <summary>  
            获取4个被“{”、“}”包括的十六进制数，其中第四个值位8个被“{”、“}”包括的十六进制数字符串  
            </summary>  
            <param name="isUpper"></param>  
            <returns></returns>  
        </member>
        <member name="T:Yuebon.Commons.Helpers.HttpContextHelper">
            <summary>
            HttpContext注入类
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Helpers.HttpHelper">
            <summary>
            http请求类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.#ctor(System.String)">
            <param name="ipaddress">请求的基础IP，例如：http://192.168.1.22:8081/ </param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            创建带用户信息的请求客户端
            </summary>
            <param name="userName">用户账号</param>
            <param name="pwd">用户密码，当WebApi端不要求密码验证时，可传空串</param>
            <param name="uriString">The URI string.</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.Get(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get请求数据
            <para>最终以url参数的方式提交</para>
            <para>yubaolee 2016-3-3 重构与post同样异步调用</para>
            </summary>
            <param name="parameters">参数字典,可为空</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.Get``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Get请求数据
            <para>最终以url参数的方式提交</para>
            </summary>
            <param name="parameters">参数字典</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <returns>实体对象</returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.HttpGet(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            同步GET请求
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="timeout">请求响应超时时间，单位/s(默认100秒)</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.HttpGetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            异步GET请求
            </summary>
            <param name="url"></param>
            <param name="headers"></param>
            <param name="timeout">请求响应超时时间，单位/s(默认100秒)</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.Post(System.Object,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Text.Encoding)">
            <summary>
            以json的方式Post数据 返回string类型
            <para>最终以json的方式放置在http体中</para>
            </summary>
            <param name="entity">实体</param>
            <param name="requestUri">例如/api/Files/UploadFile</param>
            <param name="headers"></param>
            <param name="contentType"></param>
            <param name="timeout">请求响应超时时间，单位/s(默认100秒)</param>
            <param name="encoding">默认UTF8</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.PostDic(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Post Dic数据
            <para>最终以formurlencode的方式放置在http体中</para>
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpHelper.ConcatURL(System.String)">
            <summary>
            把请求的URL相对路径组合成绝对路径
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpRequestHelper.HttpGet(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            使用Get方法获取字符串结果（加入Cookie）
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpRequestHelper.HttpPost(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Text.Encoding,System.Int32,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            使用Post方法获取字符串结果，常规提交
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpRequestHelper.HttpPost(System.String,System.String,System.Text.Encoding,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            发送HttpPost请求，使用JSON格式传输数据
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpRequestHelper.HttpPost(System.String,System.Object,System.Text.Encoding,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            使用POST请求数据，使用JSON传输数据
            </summary>
            <param name="url"></param>
            <param name="dataObj">传输对象，转换为JSON传输</param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpRequestHelper.HttpPost(System.String,System.IO.Stream,System.String,System.Text.Encoding,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32)">
            <summary>
            使用Post方法获取字符串结果
            </summary>
            <param name="url"></param>
            <param name="postStream"></param>
            <param name="contentType"></param>
            <param name="encoding"></param>
            <param name="timeOut"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.HttpRequestHelper.GetQueryString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            组装QueryString的方法
            参数之间用&amp;连接，首位没有符号，如：a=1&amp;b=2&amp;c=3
            </summary>
            <param name="formData"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Helpers.ImgHelper">
            <summary>
            图片处理
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ImgHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源文件</param>
            <param name="thumbnailPath">缩略图</param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="mode"></param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ImgHelper.GetNetImg(System.String)">
            <summary>
            获取网络图片
            </summary>
            <param name="imgUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ImgHelper.CutEllipse(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Size,System.String)">
            <summary>
            将图片裁剪成圆形
            </summary>
            <param name="img"></param>
            <param name="rec"></param>
            <param name="size"></param>
            <param name="imgSavePath"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.ImgHelper.CutEllipse(System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            将图片裁剪成圆形
            </summary>
            <param name="img"></param>
            <param name="rec"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Helpers.NPOIHelper">
            <summary>
            office 导入导出
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.NPOIHelper.ExportExcel(System.Data.DataTable,System.String)">
            <summary>
            DataTable 导出到 Excel 的 MemoryStream
            </summary>
            <param name="dtSource">源 DataTable</param>
            <param name="strHeaderText">表头文本 空值未不要表头标题</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.NPOIHelper.ExportExcel(System.Data.DataTable,System.String,System.String)">
            <summary>
            DaataTable 导出到 Excel 文件
            </summary>
            <param name="dtSource">源 DataaTable</param>
            <param name="strHeaderText">表头文本</param>
            <param name="strFileName">保存位置(文件名及路径)</param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.NPOIHelper.ImportExcel(System.String)">
            <summary>
            读取 excel
            默认第一行为标头
            </summary>
            <param name="strFileName">excel 文档路径</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.NPOIHelper.ExportExcel(System.Data.DataSet,System.String)">
            <summary>
            DataSet 导出到 Excel 的 MemoryStream
            </summary>
            <param name="dsSource">源 DataSet</param>
            <param name="strHeaderText">表头文本 空值未不要表头标题(多个表对应多个表头以英文逗号(,)分开，个数应与表相同)</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.NPOIHelper.ExportFromDSExcel(NPOI.HSSF.UserModel.HSSFWorkbook,System.Data.DataTable,System.String)">
            <summary>
            DataTable 导出到 Excel 的 MemoryStream
            </summary>
            <param name="workbook">源 workbook</param>
            <param name="dtSource">源 DataTable</param>
            <param name="strHeaderText">表头文本 空值未不要表头标题(多个表对应多个表头以英文逗号(,)分开，个数应与表相同)</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Helpers.SessionHelper">
            <summary>
            Session帮助类，可在非controler中读取或保存session
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.SessionHelper.SetSession(System.String,System.Object)">
            <summary>
            设置 Session
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Yuebon.Commons.Helpers.SessionHelper.GetSession``1(System.String)">
            <summary>
            获取 Session
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.SessionHelper.GetString(System.String)">
            <summary>
            获取 Session
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Helpers.XmlConverter">
            <summary>
            XML文件与对象相互转化操作
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Helpers.XmlConverter.Serialize``1(``0,System.String)">
            <summary>
            将对象转换为xml格式
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="xmlFilePath">xml文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Helpers.XmlConverter.Deserialize``1(System.String)">
            <summary>
            将xml格式转为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xmlFilePath">xml文件路径</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.IoC.IoCContainer">
            <summary>
            Autofac IOC 容器
            </summary>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.InitAutofac(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Register(System.String[])">
            <summary>
            注册程序集
            </summary>
            <param name="assemblies">程序集名称的集合</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.RegisterFrom(System.String[])">
            <summary>
            注册程序集
            </summary>
            <param name="assemblies">程序集名称的集合,全路径</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Register(System.Type[])">
            <summary>
            注册类型
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Register(System.String,System.String)">
            <summary>
            注册程序集。
            </summary>
            <param name="implementationAssemblyName">接口实现程序集</param>
            <param name="interfaceAssemblyName">接口程序集</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.RegisterNew(System.String,System.String)">
            <summary>
            注册程序集
            </summary>
            <param name="AssemblyName">程序集</param>
            <param name="namespaceName">命名空间</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.RegisterLoadFrom(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="AssemblyName"></param>
            <param name="namespaceName"></param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Register``2">
            <summary>
            注册类
            </summary>
            <typeparam name="TInterface">接口</typeparam>
            <typeparam name="TImplementation">实现类</typeparam>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Register``1(``0)">
            <summary>
            注册一个实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构建IOC容器，需在各种Register后调用。
            </summary>
        </member>
        <member name="M:Yuebon.Commons.IoC.IoCContainer.Resolve``1">
            <summary>
            从容器中获取对象 Resolve an instance of the default requested type from the container
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.IoC.ServiceLocator">
            <summary>
            服务定位器。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.IoC.ServiceLocator.ServiceProvider">
            <summary>
            .NET CORE 内置服务提供者引用。
            </summary>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.GetService``1">
            <summary>
            手动获取.NET CORE已注册服务实例。
            使用之前请确保在启动类（Startup.cs）配置（Configure）方法中已经保持【app.ApplicationServices】引用。
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="F:Yuebon.Commons.IoC.ServiceLocator._mapping">
            <summary>
            类型与实例类型的映射集合。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.IoC.ServiceLocator._resources">
            <summary>
            类型与已实例化对象映射集合。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.IoC.ServiceLocator._lock">
            <summary>
            操作锁。（待优化）
            存在问题：lock机制会把其它线程锁在外面，无论是读还是写，都会被锁，性能比较低。
            解决方案：线程安全可尝试用ConcurrentDictionary代替。
            </summary>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Add``1(System.Object)">
            <summary>
            添加注册资源。
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="instance">资源实例</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Add(System.Type,System.Object)">
            <summary>
            添加注册资源。
            </summary>
            <param name="type">资源类型</param>
            <param name="instance">资源实例</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Get``1">
            <summary>
            查找指定类型的资源实例。
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <returns>资源实例</returns>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Get(System.Type)">
            <summary>
            查找指定类型的资源实例。
            </summary>
            <param name="type">The type of instance.</param>
            <returns>资源实例</returns>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.TryGet``1(``0@)">
            <summary>
            尝试查找指定类型的资源实例。
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="resource">资源实例</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.RegisterType``1">
            <summary>
            注册类型。
            </summary>
            <typeparam name="T">实体类型，类型限制为有公共无参构造函数</typeparam>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.RegisterType``2">
            <summary>
            注册类型。
            </summary>
            <typeparam name="TFrom">资源类型</typeparam>
            <typeparam name="TTo">实体类型，类型限制为有公共无参构造函数</typeparam>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.IsRegistered``1">
            <summary>
            是否已注册此类型。
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <returns>是否已注册此类型</returns>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Resolve``1">
            <summary>
            获取类型实例。
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <returns>类型实例</returns>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Remove``1">
            <summary>
            移除指定类型的资源实例。
            </summary>
            <typeparam name="T">资源类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Remove(System.Type)">
            <summary>
            移除指定类型的资源实例。
            </summary>
            <param name="type">资源类型</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Teardown``1">
            <summary>
            拆除指定类型的资源实例及注册映射类型。
            </summary>
            <typeparam name="T">资源类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Teardown(System.Type)">
            <summary>
            拆除指定类型的资源实例及注册映射类型。
            </summary>
            <param name="type">资源类型</param>
        </member>
        <member name="M:Yuebon.Commons.IoC.ServiceLocator.Clear">
            <summary>
            移除所有资源。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Json.JsonHelper">
            <summary>
            JSON序列化、反序列化扩展类。
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Json.JsonHelper.ToJson(System.Object)">
            <summary>
            对象序列化成JSON字符串。
            </summary>
            <param name="obj">序列化对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Json.JsonHelper.ToObject``1(System.String)">
            <summary>
            JSON字符串序列化成对象。
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Json.JsonHelper.ToList``1(System.String)">
            <summary>
            JSON字符串序列化成集合。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Json.JsonHelper.ToTable(System.String)">
            <summary>
            JSON字符串序列化成DataTable。
            </summary>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Json.JsonPropertyContractResolver">
            <summary>
            JSON分解器。
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Json.JsonPropertyContractResolver._listExclude">
            <summary>
            需要排除的属性。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Log.Log4NetHelper">
            <summary>
            log4net封装类
            *********************************使用说明**********************************
            1.首先将配置文件(log4net.config或App.config)放置在程序运行目录
            2.调用SetConfig方法，并传入配置文件的全路径
            3.调用WriteError、WriteInfo、WriteFatal、WriteDebug等方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.SetConfig(log4net.Repository.ILoggerRepository,System.String)">
            <summary>
            读取配置文件，并使其生效。如果未找到配置文件，则抛出异常
            </summary>
            <param name="repository"></param>
            <param name="configFilePath">配置文件全路径</param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteError(System.Type,System.Exception)">
            <summary>
            输出错误日志到Log4Net
            </summary>
            <param name="t"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteError(System.Type,System.String)">
            <summary>
            输出错误日志到Log4Net
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteInfo(System.Type,System.String)">
            <summary>
            记录消息日志
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteInfo(System.Type,System.Exception)">
            <summary>
            记录消息日志
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteFatal(System.Type,System.String)">
            <summary>
            记录致命错误日志
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteFatal(System.Type,System.Exception)">
            <summary>
            记录致命错误日志
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteDebug(System.Type,System.String)">
            <summary>
            记录Debug日志
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteDebug(System.Type,System.Exception)">
            <summary>
            记录Debug日志
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteWarn(System.Type,System.String)">
            <summary>
            记录警告信息
            </summary>
            <param name="t"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yuebon.Commons.Log.Log4NetHelper.WriteWarn(System.Type,System.Exception)">
            <summary>
            记录警告信息
            </summary>
            <param name="t"></param>
            <param name="exception"></param>
        </member>
        <member name="T:Yuebon.Commons.Mapping.IMapTuple">
            <summary>
            定义对象映射源与目标配对
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Mapping.IMapTuple.CreateMap">
            <summary>
            执行对象映射构造
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Mapping.MapperExtensions">
            <summary>
            对象映射扩展操作
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Mapping.MapperExtensions.SetMapper(AutoMapper.IMapper)">
            <summary>
            设置对象映射执行者
            </summary>
            <param name="mapper">映射执行者</param>
        </member>
        <member name="M:Yuebon.Commons.Mapping.MapperExtensions.MapTo``1(System.Object)">
            <summary>
            将对象映射为指定类型
            </summary>
            <typeparam name="TTarget">要映射的目标类型</typeparam>
            <param name="source">源对象</param>
            <returns>目标类型的对象</returns>
        </member>
        <member name="M:Yuebon.Commons.Mapping.MapperExtensions.MapTo``2(``0,``1)">
            <summary>
            使用源类型的对象更新目标类型的对象
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TTarget">目标类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">待更新的目标对象</param>
            <returns>更新后的目标类型对象</returns>
        </member>
        <member name="M:Yuebon.Commons.Mapping.MapperExtensions.ToOutput``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``1,System.Object}}[])">
            <summary>
            将数据源映射为指定<typeparamref name="TOutputDto"/>的集合
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TOutputDto"></typeparam>
            <param name="source"></param>
            <param name="membersToExpand"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Mapping.MapperExtensions.MapTo``1(System.Collections.IEnumerable)">
            <summary>
            集合到集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Mapping.MapperExtensions.CheckMapper">
            <summary>
            验证映射执行者是否为空
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Net.IpAddressRange">
            <summary>
            IP v4 and v6 range helper by jsakamoto
            Fork from https://github.com/jsakamoto/ipaddressrange
            </summary>
            <example>
            "192.168.0.0/24" 
            "fe80::/10" 
            "192.168.0.0/255.255.255.0" 
            "192.168.0.0-192.168.0.255"
            </example>
        </member>
        <member name="P:Yuebon.Commons.Options.DbContextOption.ConnectionString">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.DbContextOption.ModelAssemblyName">
            <summary>
            实体程序集名称
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.DbContextOption.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Options.DbType">
            <summary>
            数据库类型枚举
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Options.DbType.MSSQLSERVER">
            <summary>
            MS SQL Server
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Options.DbType.ORACLE">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Options.DbType.MYSQL">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Options.DbType.SQLITE">
            <summary>
            Sqlite
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Options.DbType.MEMORY">
            <summary>
            in-memory database
            </summary>
        </member>
        <member name="F:Yuebon.Commons.Options.DbType.NPGSQL">
            <summary>
            PostgreSQL
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Options.JwtOption">
            <summary>
            JsonWebToken配置模型。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.JwtOption.Issuer">
            <summary>
            签发者。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.JwtOption.Audience">
            <summary>
            收发者。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.JwtOption.Secret">
            <summary>
            密钥。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.JwtOption.Expiration">
            <summary>
            Token有效期（单位：分钟）。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.JwtOption.refreshJwtTime">
            <summary>
            Token有效刷新时间（单位：分钟）。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Options.WeixinOption">
            <summary>
            微信配置模型。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.WeixinOption.WxAppId">
            <summary>
            小程序AppID
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.WeixinOption.WxAppSecret">
            <summary>
            小程序AppSecret。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Options.WeixinOption.WxEncodingAESKey">
            <summary>
            微信小程序后台的EncodingAESKey。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.UIConstants">
            <summary>
            常用软件字符串
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.ApplicationExpiredDate">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.SoftwareVersion">
            <summary>
            软件版本
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.SoftwareProductName">
            <summary>
            软件产品名称
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.SoftwareProbationDay">
            <summary>
            软件的试用期
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.IsolatedStorageDirectoryName">
            <summary>
            独立存储目录名称
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.IsolatedStorageEncryptKey">
            <summary>
            独立存储加密钥
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.PublicKey">
            <summary>
            注册加密公钥
            </summary>
        </member>
        <member name="F:Yuebon.Commons.UIConstants.WebRegisterURL">
            <summary>
            Web验证地址
            </summary>
        </member>
        <member name="M:Yuebon.Commons.UIConstants.SetValue(System.String,System.String,System.String,System.String)">
            <summary>
            设置参数值
            </summary>
            <param name="expiredDate">过期时间</param>
            <param name="version">软件版本</param>
            <param name="name">软件名称</param>
            <param name="publicKey">公钥字符串</param>
        </member>
        <member name="T:Yuebon.Commons.Pages.JQueryDataTablePageInfo">
            <summary>
             JQueryDataTable 分页
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.JQueryDataTablePageInfo.CurrenetPageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.JQueryDataTablePageInfo.PageSize">
            <summary>
            每页显示的记录
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.JQueryDataTablePageInfo.RecordCount">
            <summary>
            记录总数
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.JQueryDataTablePageInfo.Draw">
            <summary>
            计数器
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.JQueryDataTablePageInfo.SearchValue">
            <summary>
            计数器
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Yuebon.Commons.Pages.JQueryDataTablePageInfo.Order" -->
        <member name="T:Yuebon.Commons.Pages.PagerInfo">
            <summary>
            分页实体
            </summary>
        </member>
        <member name="E:Yuebon.Commons.Pages.PagerInfo.OnPageInfoChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerInfo.CurrenetPageIndex">
            <summary>
            获取或设置当前页码
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerInfo.PageSize">
            <summary>
            获取或设置每页显示的记录
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerInfo.RecordCount">
            <summary>
            获取或设置记录总数
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Pages.PageResult`1">
            <summary>
            保存分页请求的结果。
            </summary>
            <typeparam name="T">返回结果集中的POCO类型</typeparam>
        </member>
        <member name="P:Yuebon.Commons.Pages.PageResult`1.CurrentPage">
            <summary>
            当前页码。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PageResult`1.TotalPages">
            <summary>
            总页码数。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PageResult`1.TotalItems">
            <summary>
            记录总数。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PageResult`1.ItemsPerPage">
            <summary>
            每页数量。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PageResult`1.Items">
            <summary>
            当前结果集。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PageResult`1.Context">
            <summary>
            自定义用户属性。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Pages.PagerHelper">
            <summary> 
            根据各种不同数据库生成不同分页语句的辅助类 PagerHelper
            </summary> 
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.TableName">
            <summary>
            待查询表或自定义查询语句
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.FieldsToReturn">
            <summary>
            需要返回的列
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.FieldNameToSort">
            <summary>
            排序字段名称
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.PageSize">
            <summary>
            页尺寸,就是一页显示多少条记录
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.PageIndex">
            <summary>
            当前的页码
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.IsDescending">
            <summary>
            是否以降序排列结果
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.StrWhere">
            <summary>
            检索条件(注意: 不要加 where)
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Pages.PagerHelper.TableOrSqlWrapper">
            <summary>
            表或Sql语句包装属性
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.#ctor">
            <summary>
            默认构造函数，其他通过属性设置
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            完整的构造函数,可以包含条件,返回记录字段等条件
            </summary>
            <param name="tableName">自定义查询语句</param>
            <param name="fieldsToReturn">需要返回的列</param>
            <param name="fieldNameToSort">排序字段名称</param>
            <param name="pageSize">页尺寸</param>
            <param name="pageIndex">当前的页码</param>
            <param name="isDescending">是否以降序排列</param>
            <param name="strwhere">检索条件</param>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetOracleSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(Oracle)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetSqlServerSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(SqlServer)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetAccessSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(Access)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetMySqlSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(MySql)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetSQLiteSql(System.Boolean)">
            <summary>
            不依赖于存储过程的分页(SQLite)
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetPagingSql(Yuebon.Commons.Pages.DatabaseType,System.Boolean)">
            <summary>
            获取对应数据库的分页语句（指定数据库类型）
            </summary>
            <param name="dbType">数据库类型枚举</param>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
        </member>
        <member name="M:Yuebon.Commons.Pages.PagerHelper.GetPagingSql(System.Boolean,System.String)">
            <summary>
            获取对应数据库的分页语句(从配置文件读取数据库类型：ComponentDbType）
            </summary>
            <param name="isDoCount">如果isDoCount为True，返回总数统计Sql；否则返回分页语句Sql</param>
        </member>
        <member name="T:Yuebon.Commons.Pages.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.AnyRadixConvert_CharacterIsNotValid">
            <summary>
              查找类似 参数中的字符\&quot;{0}\&quot;不是 {1} 进制数的有效字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.AnyRadixConvert_Overflow">
            <summary>
              查找类似 0 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Caching_CacheNotInitialized">
            <summary>
              查找类似 缓存功能尚未初始化，未找到可用的 ICacheProvider 实现。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ConfigFile_ItemKeyDefineRepeated">
            <summary>
              查找类似 标识为“{0}”的项重复定义 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ConfigFile_NameToTypeIsNull">
            <summary>
              查找类似 名称为“{0}”的类型不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Context_BuildservicesFirst">
            <summary>
              查找类似 请先初始化依赖注入服务，再使用OSharpContext.IocRegisterservices属性 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.DbContextInitializerConfig_InitializerNotExists">
            <summary>
              查找类似 上下文初始化类型“{0}”不存在 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Filter_GroupOperateError">
            <summary>
              查找类似 查询条件组中的操作类型错误，只能为And或者Or。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Filter_RuleFieldInTypeNotFound">
            <summary>
              查找类似 指定的属性“{0}”在类型“{1}”中不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Ioc_CannotResolveservice">
            <summary>
              查找类似 无法解析类型“{0}”的构造函数中类型为“{1}”的参数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Ioc_FrameworkNotInitialized">
            <summary>
              查找类似 OSharp框架尚未初始化，请先初始化 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Ioc_ImplementationTypeNotFound">
            <summary>
              查找类似 类型“{0}”的实现类型无法找到 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Ioc_NoConstructorMatch">
            <summary>
              查找类似 类型“{0}”中找不到合适参数的构造函数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Ioc_TryAddIndistinguishableTypeToEnumerable">
            <summary>
              查找类似 实现类型不能为“{0}”，因为该类型与注册为“{1}”的其他类型无法区分 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.IocInitializerBase_TypeNotIRepositoryType">
            <summary>
              查找类似 类型“{0}”不是仓储接口“IRepository&lt;,&gt;”的派生类。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.IocInitializerBase_TypeNotIUnitOfWorkType">
            <summary>
              查找类似 类型“{0}”不是操作单元“IUnitOfWork”的派生类。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Logging_CreateLogInstanceReturnNull">
            <summary>
              查找类似 创建名称为“{0}”的日志实例时“{1}”返回空实例。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Map_MapperIsNull">
            <summary>
              查找类似 MapperExtensions.Mapper不能为空，请先设置值 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.Mef_HttpContextItems_NotFoundRequestContainer">
            <summary>
              查找类似 当前Http上下文中不存在Request有效范围的Mef部件容器。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ObjectExtensions_PropertyNameNotExistsInType">
            <summary>
              查找类似 指定对象中不存在名称为“{0}”的属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ObjectExtensions_PropertyNameNotFixedType">
            <summary>
              查找类似 指定名称“{0}”的属性类型不是“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_Between">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_BetweenNotEqual">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_DirectoryNotExists">
            <summary>
              查找类似 指定的目录路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_FileNotExists">
            <summary>
              查找类似 指定的文件路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotContainsNull_Collection">
            <summary>
              查找类似 集合“{0}”中不能包含null的项 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotEmpty_Guid">
            <summary>
              查找类似 参数“{0}”的值不能为Guid.Empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotGreaterThan">
            <summary>
              查找类似 参数“{0}”的值必须大于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须大于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotLessThan">
            <summary>
              查找类似 参数“{0}”的值必须小于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotLessThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须小于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotNull">
            <summary>
              查找类似 参数“{0}”不能为空引用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              查找类似 参数“{0}”不能为空引用或空集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              查找类似 参数“{0}”不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Properties.Resources.QueryCacheExtensions_TypeNotEntityType">
            <summary>
              查找类似 类型“{0}”不是实体类型 的本地化字符串。
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.AppDomainAllAssemblyFinder">
            <summary>
            应用程序目录程序集查找器
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.AppDomainAllAssemblyFinder.#ctor(System.Boolean)">
            <summary>
            初始化一个<see cref="T:Yuebon.Commons.Reflection.AppDomainAllAssemblyFinder"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.AppDomainAllAssemblyFinder.FindAllItems">
            <summary>
            重写以实现程序集的查找
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.AssemblyExtensions">
            <summary>
            程序集扩展操作类
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.AttributeTypeFinderBase`1">
            <summary>
            标注了指定<see cref="T:System.Attribute"/>特性的类型的查找器基类
            </summary>
            <typeparam name="TAttributeType">标注的<see cref="T:System.Attribute"/>类型</typeparam>
        </member>
        <member name="M:Yuebon.Commons.Reflection.AttributeTypeFinderBase`1.#ctor(Yuebon.Commons.Reflection.IAllAssemblyFinder)">
            <summary>
            初始化一个<see cref="T:Yuebon.Commons.Reflection.AttributeTypeFinderBase`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.AttributeTypeFinderBase`1.FindAllItems">
            <summary>
            重写以实现所有项的查找
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.BaseTypeFinderBase`1">
            <summary>
            指定基类的实现类型查找器基类
            </summary>
            <typeparam name="TBaseType">要查找类型的基类</typeparam>
        </member>
        <member name="M:Yuebon.Commons.Reflection.BaseTypeFinderBase`1.#ctor(Yuebon.Commons.Reflection.IAllAssemblyFinder)">
            <summary>
            初始化一个<see cref="T:Yuebon.Commons.Reflection.BaseTypeFinderBase`1"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.BaseTypeFinderBase`1.FindAllItems">
            <summary>
            重写以实现所有项的查找
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.ComLibraryLoader">
            <summary>
            不注册Com组件的方式加载Com组件
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.ComLibraryLoader.CreateObjectFromPath(System.String,System.Guid,System.Boolean)">
            <summary>
            从Com的dll文件创建Com对象
            </summary>
            <param name="dllPath">dll文件路径</param>
            <param name="clsid">Com组件的clsid</param>
            <param name="comFallback">无法加载时是否从注册系统中的Com组件加载</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Reflection.ComLibraryLoader.CreateObjectFromPath(System.String,System.Guid,System.Boolean,System.Boolean)">
            <summary>
            从Com的dll文件创建Com对象
            </summary>
            <param name="dllPath">dll文件路径</param>
            <param name="clsid">Com组件的clsid</param>
            <param name="setSearchPath">是否设置搜索路径</param>
            <param name="comFallback">无法加载时是否从注册系统中的Com组件加载</param>
            <returns>创建的Com对象</returns>
        </member>
        <member name="M:Yuebon.Commons.Reflection.ComLibraryLoader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.DirectoryAssemblyFinder">
            <summary>
            目录程序集查找器
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.DirectoryAssemblyFinder.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:Yuebon.Commons.Reflection.DirectoryAssemblyFinder"/>类型的新实例
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.DirectoryAssemblyFinder.Find(System.Func{System.Reflection.Assembly,System.Boolean},System.Boolean)">
            <summary>
            查找指定条件的项
            </summary>
            <param name="predicate">筛选条件</param>
            <param name="fromCache">是否来自缓存</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Reflection.DirectoryAssemblyFinder.FindAll(System.Boolean)">
            <summary>
            查找所有项
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.FastInvokeHandler">
            <summary>
            快速执行处理器
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.FastInvokeHandler.Create(System.Reflection.MethodInfo)">
            <summary>
            创建方法的快速处理封装
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.IAllAssemblyFinder">
            <summary>
            定义所有程序集查找器
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.IAssemblyFinder">
            <summary>
            定义程序集查找器
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.IComClassFactory">
            <summary>
            Com类型实例工厂
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.IComClassFactory.CreateInstance(System.Object,System.Guid,System.Object@)">
            <summary>
            CreateInstance
            </summary>
            <param name="pUnkOuter"></param>
            <param name="riid"></param>
            <param name="obj">创建输出的对象</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Reflection.IComClassFactory.LockServer(System.Boolean)">
            <summary>
            LockServer
            </summary>
            <param name="fLock"></param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.IMethodInfoFinder">
            <summary>
            定义方法信息查找器
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.IMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="type">要查找的类型</param>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Reflection.IMethodInfoFinder.FindAll(System.Type)">
            <summary>
            查找所有项
            </summary>
            <param name="type">要查找的类型</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Reflection.ITypeFinder">
            <summary>
            定义类型查找行为
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.LockExtensions">
            <summary>
            lock操作扩展方法
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.LockExtensions.Locking(System.Object,System.Action)">
            <summary>
            锁定给定object标识，执行委托
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.LockExtensions.Locking``1(``0,System.Action{``0})">
            <summary>
            锁定给定源数据，执行委托
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.LockExtensions.Locking``1(System.Object,System.Func{``0})">
            <summary>
            锁定给定object标识，执行委托
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.LockExtensions.Locking``2(``0,System.Func{``0,``1})">
            <summary>
            锁定给定源数据，执行委托
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.NativeMethods">
            <summary>
            系统本地方法
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Reflection.PublicInstanceMethodInfoFinder">
            <summary>
            公共实例方法查找器
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Reflection.PublicInstanceMethodInfoFinder.Find(System.Type,System.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>
            查找指定条件的项
            </summary>
            <param name="type">要查找的类型</param>
            <param name="predicate">筛选条件</param>
            <returns></returns>
        </member>
        <member name="M:Yuebon.Commons.Reflection.PublicInstanceMethodInfoFinder.FindAll(System.Type)">
            <summary>
            查找所有项
            </summary>
            <param name="type">要查找的类型</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Utility.Reflection.SyncLocker">
            <summary>
            同步锁
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Utility.Reflection.SyncLocker.MutexLock(System.String,System.Action,System.Boolean,System.Boolean)">
            <summary>
            Mutex同步锁
            </summary>
            <param name="key">同步键的字符串，null时表示局部互斥体，否则根据process参数确定为Global\开头的进程锁或Local\开头的线程锁</param>
            <param name="action">要执行的业务操作</param>
            <param name="recursive">指示当前调用是否为递归处理，递归处理时检测到异常则抛出异常，避免进入无限递归</param>
            <param name="process">是否进程锁，true时，返回Global\开头，否则返回Local\开头</param>
        </member>
        <member name="M:Yuebon.Commons.Utility.Reflection.SyncLocker.GetKey(System.String,System.Boolean)">
            <summary>
            操作系统级的同步键
            (如果将 name 指定为 null 或空字符串，则创建一个局部互斥体。 
            如果名称以前缀“Global\”开头，则 mutex 在所有终端服务器会话中均为可见。 
            如果名称以前缀“Local\”开头，则 mutex 仅在创建它的终端服务器会话中可见。 
            如果创建已命名 mutex 时不指定前缀，则它将采用前缀“Local\”。)
            </summary>
            <param name="key">同步键的字符串，null时表示局部互斥体</param>
            <param name="process">是否进程锁，true时，返回Global\开头，否则返回Local\开头</param>
            <returns></returns>
        </member>
        <member name="T:Yuebon.Commons.Tree.JsTreeModel">
            <summary>
            JsTree 数据模型实体
            {
                id          : "string" // required
                parent      : "string" // required
                text        : "string" // node text
                icon        : "string" // string for custom
                state       : {
                    opened    : boolean  // is the node open
                    disabled  : boolean  // is the node disabled
                    selected  : boolean  // is the node selected
                },
                li_attr     : {}  // attributes for the generated LI node
                a_attr      : {}  // attributes for the generated A node
            }
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Tree.TreeViewModel">
            <summary>
            树形视图模型
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Tree.TreeViewModel.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Yuebon.Commons.Tree.TreeViewModel.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="nodeId">j节点Id</param>
            <param name="pId">父节点Id</param>
        </member>
        <member name="M:Yuebon.Commons.Tree.TreeViewModel.#ctor(System.String,System.String,System.String,System.String,System.String)">
            生成一个节点
            @param nodeId
            @param pId
            @param text
            @param icon
            @param href
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.nodeId">
            <summary>
            树的节点Id，区别于数据库中保存的数据Id
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.pid">
            <summary>
            树的父节点Id
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.text">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.icon">
            <summary>
            节点图标
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.href">
            <summary>
            点击节点触发的链接
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.nodes">
            <summary>
            子节点
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.tags">
            <summary>
            几点标签
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewModel.state">
            <summary>
            节点状态
            </summary>
        </member>
        <member name="T:Yuebon.Commons.Tree.TreeViewSateModel">
            <summary>
            树形视图节点选择状态
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewSateModel.checked">
            <summary>
            选中
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewSateModel.disabled">
            <summary>
            显示或隐藏
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewSateModel.expanded">
            <summary>
            展开
            </summary>
        </member>
        <member name="P:Yuebon.Commons.Tree.TreeViewSateModel.selected">
            <summary>
            选中
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.SqlMapperExtensions">
            <summary>
            The Dapper.Contrib extensions for Dapper
            </summary>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.GetAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Returns a single entity by a single id from table "Ts" asynchronously using Task. T must be of interface type. 
            Id must be marked with [Key] attribute.
            Created entity is tracked/intercepted for changes and used by the Update() extension. 
            </summary>
            <typeparam name="T">Interface type to create and populate</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="id">Id of the entity to get, must be marked with [Key] attribute</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Entity of T</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.GetAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Returns a list of entites from table "Ts".  
            Id of T must be marked with [Key] attribute.
            Entities created from interfaces are tracked/intercepted for changes and used by the Update() extension
            for optimal performance. 
            </summary>
            <typeparam name="T">Interface or type to create and populate</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Entity of T</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32},ISqlAdapter)">
            <summary>
            Inserts an entity into table "Ts" asynchronously using Task and returns identity id.
            </summary>
            <typeparam name="T">The type being inserted.</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToInsert">Entity to insert</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="sqlAdapter">The specific ISqlAdapter to use, auto-detected based on connection if null</param>
            <returns>Identity of inserted entity</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates entity in table "Ts" asynchronously using Task, checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpdate">Entity to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Delete entity in table "Ts" asynchronously using Task.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToDelete">Entity to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.DeleteAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Delete all entities in the table related to the type T asynchronously using Task.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if none found</returns>
        </member>
        <member name="T:Dapper.Contrib.Extensions.SqlMapperExtensions.IProxy">
            <summary>
            Defined a proxy object with a possibly dirty state.
            </summary>
        </member>
        <member name="P:Dapper.Contrib.Extensions.SqlMapperExtensions.IProxy.IsDirty">
            <summary>
            Whether the object has been changed.
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.SqlMapperExtensions.ITableNameMapper">
            <summary>
            Defines a table name mapper for getting table names from types.
            </summary>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.ITableNameMapper.GetTableName(System.Type)">
            <summary>
            Gets a table name from a given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get a name from.</param>
            <returns>The table name for the given <paramref name="type"/>.</returns>
        </member>
        <member name="T:Dapper.Contrib.Extensions.SqlMapperExtensions.GetDatabaseTypeDelegate">
            <summary>
            The function to get a database type from the given <see cref="T:System.Data.IDbConnection"/>.
            </summary>
            <param name="connection">The connection to get a database type name from.</param>
        </member>
        <member name="T:Dapper.Contrib.Extensions.SqlMapperExtensions.TableNameMapperDelegate">
            <summary>
            The function to get a a table name from a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get a table name for.</param>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.KeyPropertiesCache(System.Type)">
            <summary>
            查询主键
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Returns a single entity by a single id from table "Ts".  
            Id must be marked with [Key] attribute.
            Entities created from interfaces are tracked/intercepted for changes and used by the Update() extension
            for optimal performance. 
            </summary>
            <typeparam name="T">Interface or type to create and populate</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="id">Id of the entity to get, must be marked with [Key] attribute</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Entity of T</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.GetAll``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Returns a list of entites from table "Ts".  
            Id of T must be marked with [Key] attribute.
            Entities created from interfaces are tracked/intercepted for changes and used by the Update() extension
            for optimal performance. 
            </summary>
            <typeparam name="T">Interface or type to create and populate</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Entity of T</returns>
        </member>
        <member name="F:Dapper.Contrib.Extensions.SqlMapperExtensions.TableNameMapper">
            <summary>
            Specify a custom table name mapper based on the POCO type name
            </summary>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Inserts an entity into table "Ts" and returns identity id or number of inserted rows if inserting a list.
            </summary>
            <typeparam name="T">The type to insert.</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToInsert">Entity to insert, can be list of entities</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>Identity of inserted entity, or number of inserted rows if inserting a list</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Updates entity in table "Ts", checks if the entity is modified if the entity is tracked by the Get() extension.
            </summary>
            <typeparam name="T">Type to be updated</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToUpdate">Entity to be updated</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if updated, false if not found or not modified (tracked entities)</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Delete entity in table "Ts".
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="entityToDelete">Entity to delete</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if not found</returns>
        </member>
        <member name="M:Dapper.Contrib.Extensions.SqlMapperExtensions.DeleteAll``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            Delete all entities in the table related to the type T.
            </summary>
            <typeparam name="T">Type of entity</typeparam>
            <param name="connection">Open SqlConnection</param>
            <param name="transaction">The transaction to run under, null (the default) if none</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <returns>true if deleted, false if none found</returns>
        </member>
        <member name="F:Dapper.Contrib.Extensions.SqlMapperExtensions.GetDatabaseType">
            <summary>
            Specifies a custom callback that detects the database type instead of relying on the default strategy (the name of the connection type object).
            Please note that this callback is global and will be used by all the calls that require a database specific adapter.
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.TableAttribute">
            <summary>
            Defines the name of a table to use in Dapper.Contrib commands.
            </summary>
        </member>
        <member name="M:Dapper.Contrib.Extensions.TableAttribute.#ctor(System.String)">
            <summary>
            Creates a table mapping to a specific name for Dapper.Contrib commands
            </summary>
            <param name="tableName">The name of this table in the database.</param>
        </member>
        <member name="P:Dapper.Contrib.Extensions.TableAttribute.Name">
            <summary>
            The name of the table in the database
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.KeyAttribute">
            <summary>
            Specifies that this field is a primary key in the database
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.ExplicitKeyAttribute">
            <summary>
            Specifies that this field is a explicitly set primary key in the database
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.WriteAttribute">
            <summary>
            Specifies whether a field is writable in the database.
            </summary>
        </member>
        <member name="M:Dapper.Contrib.Extensions.WriteAttribute.#ctor(System.Boolean)">
            <summary>
            Specifies whether a field is writable in the database.
            </summary>
            <param name="write">Whether a field is writable in the database.</param>
        </member>
        <member name="P:Dapper.Contrib.Extensions.WriteAttribute.Write">
            <summary>
            Whether a field is writable in the database.
            </summary>
        </member>
        <member name="T:Dapper.Contrib.Extensions.ComputedAttribute">
            <summary>
            Specifies that this is a computed column.
            </summary>
        </member>
        <member name="T:ISqlAdapter">
            <summary>
            The interface for all Dapper.Contrib database operations
            Implementing this is each provider's model.
            </summary>
        </member>
        <member name="M:ISqlAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:ISqlAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:ISqlAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:ISqlAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:SqlServerAdapter">
            <summary>
            The SQL Server database adapter.
            </summary>
        </member>
        <member name="M:SqlServerAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:SqlServerAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:SqlServerAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:SqlServerAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:SqlCeServerAdapter">
            <summary>
            The SQL Server Compact Edition database adapter.
            </summary>
        </member>
        <member name="M:SqlCeServerAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:SqlCeServerAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:SqlCeServerAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:SqlCeServerAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:MySqlAdapter">
            <summary>
            The MySQL database adapter.
            </summary>
        </member>
        <member name="M:MySqlAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:MySqlAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:MySqlAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:MySqlAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:PostgresAdapter">
            <summary>
            The Postgres database adapter.
            </summary>
        </member>
        <member name="M:PostgresAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:PostgresAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:PostgresAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:PostgresAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:SQLiteAdapter">
            <summary>
            The SQLite database adapter.
            </summary>
        </member>
        <member name="M:SQLiteAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:SQLiteAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:SQLiteAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:SQLiteAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="T:FbAdapter">
            <summary>
            The Firebase SQL adapeter.
            </summary>
        </member>
        <member name="M:FbAdapter.InsertAsync(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:FbAdapter.Insert(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Object)">
            <summary>
            Inserts <paramref name="entityToInsert"/> into the database, returning the Id of the row created.
            </summary>
            <param name="connection">The connection to use.</param>
            <param name="transaction">The transaction to use.</param>
            <param name="commandTimeout">The command timeout to use.</param>
            <param name="tableName">The table to insert into.</param>
            <param name="columnList">The columns to set with this insert.</param>
            <param name="parameterList">The parameters to set for this insert.</param>
            <param name="keyProperties">The key columns in this table.</param>
            <param name="entityToInsert">The entity to insert.</param>
            <returns>The Id of the row created.</returns>
        </member>
        <member name="M:FbAdapter.AppendColumnName(System.Text.StringBuilder,System.String)">
            <summary>
            Adds the name of a column.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
        <member name="M:FbAdapter.AppendColumnNameEqualsValue(System.Text.StringBuilder,System.String)">
            <summary>
            Adds a column equality to a parameter.
            </summary>
            <param name="sb">The string builder  to append to.</param>
            <param name="columnName">The column name.</param>
        </member>
    </members>
</doc>
